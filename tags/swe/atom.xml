<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - swe</title>
    <link rel="self" type="application/atom+xml" href="https://blog.carrio.dev/tags/swe/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.carrio.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-09-21T00:00:00+00:00</updated>
    <id>https://blog.carrio.dev/tags/swe/atom.xml</id>
    <entry xml:lang="en">
        <title>direnv magic: instant project environments</title>
        <published>2023-09-21T00:00:00+00:00</published>
        <updated>2023-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/direnv-magic/"/>
        <id>https://blog.carrio.dev/blog/direnv-magic/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/direnv-magic/">&lt;h1 id=&quot;direnv-magic&quot;&gt;direnv magic&lt;&#x2F;h1&gt;
&lt;p&gt;A very popular project for managing environment variables in projects today is &lt;code&gt;dotenv&lt;&#x2F;code&gt;. There are packages for various languages, like NodeJS and PHP. They are built on a simple principle: to load environment variables from a &lt;code&gt;.env&lt;&#x2F;code&gt; file located in the project root.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to the 12 Factor App, managing environment variables in source control is generally discouraged. Instead, environment variables should be set externally, like via the OS or a container orchestrator. However, &lt;code&gt;dotenv&lt;&#x2F;code&gt; packages rely on the application loading the &lt;code&gt;.env&lt;&#x2F;code&gt; file itself, which means that the application must process a file in order to retrieve its environment configuration.&lt;&#x2F;p&gt;
&lt;p&gt;As a whole, this practice is convenient for local development, but does not lend well to the Config principle of the 12 Factor App.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-alternative-approach&quot;&gt;an alternative approach&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;direnv&lt;&#x2F;code&gt; tool allows environment variables to be set based on the directory. With &lt;code&gt;direnv&lt;&#x2F;code&gt;, you can define environment variables in a &lt;code&gt;.envrc&lt;&#x2F;code&gt; file that will be loaded automatically when entering that directory. This avoids embedding environment configuration in the application code&#x2F;source control, and makes variables configurable on a per-directory basis. It also entirely avoids having dependencies on files and the entirety of the &lt;code&gt;dotenv&lt;&#x2F;code&gt; package itself in a production application. You don&#x27;t have to conditionally load files - the environment is configured automatically by the shell in local development environments, and configured by the orchestrator in production, like Kubernetes, in the exact same manner: &lt;strong&gt;the environment variables&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-behavior&quot;&gt;the behavior&lt;&#x2F;h2&gt;
&lt;p&gt;Working with &lt;code&gt;direnv&lt;&#x2F;code&gt;, you gain the ability to not only define environment variables in a &lt;code&gt;.envrc&lt;&#x2F;code&gt; file per directory, but also automatically configure your shell environment based on that file in other means. For example, you can automatically execute scripts or enter a Nix flake dev shell.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;automated-secure-shell-environments&quot;&gt;automated, secure shell environments&lt;&#x2F;h2&gt;
&lt;p&gt;Due to the simple approach of a &lt;code&gt;.envrc&lt;&#x2F;code&gt; file and automatic nature of &lt;code&gt;direnv&lt;&#x2F;code&gt;, it provides a streamlined solution for automatically entering development environments in a snap. It also requires that you permit a directory before &lt;code&gt;direnv&lt;&#x2F;code&gt; will load variables or execute scripts, preventing accidental exposure in untrusted directories.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;an-example-with-nix-flakes&quot;&gt;an example with Nix flakes&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose we have a Nix flake in our project repository that defines a development shell environment. With &lt;code&gt;direnv&lt;&#x2F;code&gt;, we can automatically enter this shell whenever we cd into the project directory. We&#x27;ll start with this project&#x27;s Nix flake, which provides a shell with the necessary tools to build and develop the blog.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;0xc dev shell&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;github:NixOS&#x2F;nixpkgs&#x2F;nixpkgs-unstable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;pkgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;devShells&lt;&#x2F;span&gt;&lt;span&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;x86_64-linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;default &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mkShell &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;; [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;git
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;zola
&lt;&#x2F;span&gt;&lt;span&gt;      ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;PROJECT_NAME &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;0xc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;shellHook &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        echo $ Started devshell for $PROJECT_NAME
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        echo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        uname -v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        echo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        git --version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        echo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        echo &amp;quot;zola version $(zola --version)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        echo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That ensures that I can access both &lt;code&gt;git&lt;&#x2F;code&gt; and &lt;code&gt;zola&lt;&#x2F;code&gt; in my dev shell.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;direnv&lt;&#x2F;code&gt; tool has native support for Nix flakes, so enabling this is a single line in our &lt;code&gt;.envrc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;use flake
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it! Now in the project, you&#x27;ll have to permit &lt;code&gt;direnv&lt;&#x2F;code&gt; once:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;direnv&lt;&#x2F;span&gt;&lt;span&gt; allow
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you are ready to automatically enter your desired shell environment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;graceful-departures&quot;&gt;graceful departures&lt;&#x2F;h2&gt;
&lt;p&gt;Not only does &lt;code&gt;direnv&lt;&#x2F;code&gt; work well when navigating around projects, it also handles exiting an environment smoothly. Dependencies you may not have had that the Nix flake included in the dev shell, such as &lt;code&gt;zola&lt;&#x2F;code&gt;, will no longer be available after leaving the project directory.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;[ ~&#x2F;Code&#x2F;blog ]: which zola
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;nix&#x2F;store&#x2F;qsaq50z4hln6f86ymvp5f5j01wqg21c3-zola-0.17.2&#x2F;bin&#x2F;zola
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[ ~&#x2F;Code&#x2F;blog ]: cd ..
&lt;&#x2F;span&gt;&lt;span&gt;direnv: unloading
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[ ~&#x2F;Code ]: which zola
&lt;&#x2F;span&gt;&lt;span&gt;which: no zola in (&#x2F;nix&#x2F;store&#x2F;16d7k6ljgy635fz5jn1flnvpx1gnx9cp-glib-2.76.4-bin&#x2F;bin:&#x2F;run&#x2F;wrappers&#x2F;bin:&#x2F;home&#x2F;tcarrio&#x2F;.local&#x2F;share&#x2F;flatpak&#x2F;exports&#x2F;bin:&#x2F;var&#x2F;lib&#x2F;flatpak&#x2F;exports&#x2F;bin:&#x2F;home&#x2F;tcarrio&#x2F;.nix-profile&#x2F;bin:&#x2F;etc&#x2F;profiles&#x2F;per-user&#x2F;tcarrio&#x2F;bin:&#x2F;nix&#x2F;var&#x2F;nix&#x2F;profiles&#x2F;default&#x2F;bin:&#x2F;run&#x2F;current-system&#x2F;sw&#x2F;bin:&#x2F;home&#x2F;tcarrio&#x2F;.local&#x2F;bin)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenFeature Introduction</title>
        <published>2023-08-07T00:00:00+00:00</published>
        <updated>2023-08-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/openfeature-introduction/"/>
        <id>https://blog.carrio.dev/blog/openfeature-introduction/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/openfeature-introduction/">&lt;h2 id=&quot;what-are-feature-flags&quot;&gt;What Are Feature Flags&lt;&#x2F;h2&gt;
&lt;p&gt;Feature flags are a way to dynamically control the capabilities of software, often with granularity to specific users, regions, and more. Flagging empowers companies to experiment with new features, and companies like Spotify, Duolingo, and Google use these heavily to prove out their hypotheses around generating better user experiences and products. It can be as simple as flipping the title of a landing page to an entire suite of features in the product- the possibilities are almost endless.&lt;&#x2F;p&gt;
&lt;p&gt;This is often times pretty simple, and in the code could be done with a basic &lt;code&gt;if&#x2F;else&lt;&#x2F;code&gt; block:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;flagService&lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;useContext&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;FeatureFlagging&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;flagService&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;isOn&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;new-experience&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;NewComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And there you have it. You now have a dynamically response interface based on logic determined by your feature flagging service. None of the above code related to any existing tool in particular, but what this post will do is get you acquainted with a new open source project called OpenFeature which you can get started with today.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-openfeature&quot;&gt;What is OpenFeature&lt;&#x2F;h2&gt;
&lt;p&gt;OpenFeature is a project that defines an &lt;strong&gt;open specification&lt;&#x2F;strong&gt; for feature flagging SDK behaviors to support consistent developer experiences backed by any feature flagging vendor in the ecosystem. The project provides an open source, vendor-agnostic SDK for many languages, which vendors can support with &lt;strong&gt;providers&lt;&#x2F;strong&gt; to back the flagging logic and &lt;strong&gt;hooks&lt;&#x2F;strong&gt; to enhance with various capabilities in the feature flagging lifecycle. The SDK is an implementation upon the OpenFeature specification, and can be configured against any one of the available providers for that language. If you&#x27;re interested, take a look on their &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;ecosystem&quot;&gt;ecosystem&lt;&#x2F;a&gt; page, which lets you search across different types like server-side and client-side, technologies like Go, JavaScript, and PHP, Vendors like Split and CloudBees, and more.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;providers&quot;&gt;Providers&lt;&#x2F;h3&gt;
&lt;p&gt;OpenFeature itself is a specification with vendor-agnostic open source packages for various languages. The vendors provide the feature flag evaluation component of the architecture though- and you&#x27;ll need one. These can be backed by open source projects, companies&#x27; SDKs like LaunchDarkly and Split, or an in-house flagging system. You can develop your application against the OpenFeature interfaces and swap out providers across environments- easily allowing your local dev system utilize environment variable configurations where production is backed by an enterprise solution. Find out more on providers &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;specification&#x2F;sections&#x2F;hooks&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hooks&quot;&gt;Hooks&lt;&#x2F;h3&gt;
&lt;p&gt;The flag evaluation lifecyle is well documented in OpenFeature, and supports &lt;em&gt;hooks&lt;&#x2F;em&gt;, which can enhance or augment a flag evaluation. Perhaps you want to inject a logger in staging or provide tracing capabilities with OpenTelemetry. All of this is easily doable by utilizing a hooks package or writing your own hook against the interface. You can read more on the hooks lifecycle &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;specification&#x2F;sections&#x2F;hooks&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;This will depend on your language of choice, so I&#x27;ll provide a couple of examples. The first will be JavaScript, with a focus on client-side use cases. The next will be a server-side reference with PHP. You can find more samples in the &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;docs&#x2F;reference&#x2F;technologies&#x2F;&quot;&gt;technologies&lt;&#x2F;a&gt; page as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;client-side-javascript&quot;&gt;Client-side JavaScript&lt;&#x2F;h3&gt;
&lt;p&gt;These utilize a pattern in OpenFeature called &lt;em&gt;static context&lt;&#x2F;em&gt;. What this amounts to is that there is just the current user, the one interacting with the web client, so there doesn&#x27;t need to be as highly dynamic of a flag evaluation system backing the OpenFeature client.&lt;&#x2F;p&gt;
&lt;p&gt;Start off by installing the package to your project. Here I&#x27;ll use &lt;code&gt;yarn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add @openfeature&#x2F;js-sdk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can start working with the SDK by coding the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@openfeature&#x2F;js-sdk&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getBooleanValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;new-experience&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is very similar to the above example, but needs the magic sauce to actually &lt;em&gt;provide&lt;&#x2F;em&gt; the logic- an OpenFeature &lt;strong&gt;provider&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wire-up-a-provider&quot;&gt;Wire Up A Provider&lt;&#x2F;h4&gt;
&lt;p&gt;You need a provider to back the flag evaluation in the OpenFeature SDK. These are pluggable, and anything that adheres to the defined Provider interface can fulfill this contract. I&#x27;ll pull in a specific provider, just as an example. In my case I&#x27;ll use the [Split] provider. The Split provider has a peer dependency on the Split SDK as well, so I will install them both with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add @splitsoftware&#x2F;openfeature-js-split-provider @splitsoftware&#x2F;splitio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have a provider, we can update our code example above accordingly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@openfeature&#x2F;js-sdk&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;SplitFactory &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@splitsoftware&#x2F;splitio&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeatureSplitProvider &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@splitsoftware&#x2F;openfeature-js-split-provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; The key that authorizes the Split client to connect to the Split API
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;SPLIT_AUTHORIZATION_KEY &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;your-split-auth-key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;splitClient &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;SplitFactory&lt;&#x2F;span&gt;&lt;span&gt;({core: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;authorizationKey&lt;&#x2F;span&gt;&lt;span&gt;}}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider &lt;&#x2F;span&gt;&lt;span&gt;= new OpenFeatureSplitProvider({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;splitClient&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;setProvider&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; With the provider set, let&amp;#39;s get to work
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getBooleanValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;new-experience&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;server-side-php&quot;&gt;Server-side PHP&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned, several languages are supported, including .NET, Go, and more. In this example we&#x27;ll utilize the PHP SDK since I wrote it.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s assume you&#x27;re using &lt;code&gt;composer&lt;&#x2F;code&gt; like every other PHP project- then you would install the SDK by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;composer&lt;&#x2F;span&gt;&lt;span&gt; require open-feature&#x2F;sdk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will pull in the package and update your &lt;code&gt;composer.json&lt;&#x2F;code&gt; and &lt;code&gt;composer.lock&lt;&#x2F;code&gt; accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;Now, to utilize the SDK, you will simply retrieve an instance from the SDK:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#867469;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Api\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Api\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Api\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureClient&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;#[Route(&amp;quot;&#x2F;cats&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;CatsController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;private readonly OpenFeatureClient &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  ) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;#[Method\Get]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;actionFavorite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;UI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userId &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getUserIdFromRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;favoriteCat &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getStringValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;favorite-cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Nebelung&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;user-id&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    ]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;favoriteCat&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;favoriteCat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    ];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when the OpenFeature client evaluates the flag for the request, it&#x27;ll pass some evaluation context as well, which includes the user&#x27;s ID if it exists. The provider will utilize this to determine what the correct value to return will be, which allows us to provide consistent experiences at the user-level. As long as the same user is accessing the API, they will receive the same behavior.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This example removed the steps of instantiating a provider and instead utilized inversion of control to allow the framework to provide the necessary OpenFeature client instead. The process is similar to that shown in the JS SDK.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;hooks-manual-instrumentation&quot;&gt;Hooks Manual Instrumentation&lt;&#x2F;h3&gt;
&lt;p&gt;Just like you can set a provider in your OpenFeature SDK, you can also add hooks. The hooks are executed in a particular ordered defined by the specification, such that you can expect the behavior in the JavaScript SDK to be identical to that of the PHP SDK, Go SDK, etc.&lt;&#x2F;p&gt;
&lt;p&gt;When adding hooks, you can do so at any level of the OpenFeature SDK: API, Client, Provider, and invocation. How these are each evaluated is defined in the &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;specification&#x2F;sections&#x2F;hooks#requirement-441&quot;&gt;hook ordering&lt;&#x2F;a&gt; specification.&lt;&#x2F;p&gt;
&lt;p&gt;Here we will add the &lt;a href=&quot;https:&#x2F;&#x2F;packagist.org&#x2F;packages&#x2F;open-feature&#x2F;validators-hook&quot;&gt;validators&lt;&#x2F;a&gt; hook for PHP, available in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-feature&#x2F;php-sdk-contrib&quot;&gt;php-sdk-contrib&lt;&#x2F;a&gt; repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;composer&lt;&#x2F;span&gt;&lt;span&gt; require open-feature&#x2F;validators-hook
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can utilize the hook at each of the mentioned levels by doing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#867469;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\Hooks\Validators\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;RegexpValidatorHook&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Custom hook
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;RegexpValidatorHook&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[0-9a-f]&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; API
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;addHooks&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Client
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;hooks-test&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;addHooks&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Provider
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;ExampleProvider&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;addHooks&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Invocation
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;resolveStringValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;test-flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;deadbeef&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;EvaluationOptions&lt;&#x2F;span&gt;&lt;span&gt;([$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;]));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Easy as that! The higher up you place the hook, the more &lt;em&gt;universal&lt;&#x2F;em&gt; it becomes across your application. Make sure to keep this in mind as applying something at the API-level will impact &lt;em&gt;every evaluation&lt;&#x2F;em&gt; in the entire application.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hooks-observability-with-opentelemetry&quot;&gt;Hooks: Observability with OpenTelemetry&lt;&#x2F;h3&gt;
&lt;p&gt;Something that you might find useful as a developer pushing code to production is how the behavior of the feature flagging system may impact your users. Perhaps you want to know whether the evaluation in the provider, or what value was determined for a given request. Well, you can utilize observability tools like OpenTelemetry to accomplish that.&lt;&#x2F;p&gt;
&lt;p&gt;There are a couple of observability hooks already provided, and both of them utilize the PSR-4 autoloader functionality for PHP. The convenience of this is that all it takes is having the package &lt;em&gt;installed&lt;&#x2F;em&gt; and you&#x27;ll get the hook set at the API-level to trace &lt;em&gt;all&lt;&#x2F;em&gt; evaluations, following the standard practices defined in e.g. OpenTelemetry&#x27;s Semantic Conventions.&lt;&#x2F;p&gt;
&lt;p&gt;So, install the package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;composer&lt;&#x2F;span&gt;&lt;span&gt; require open-feature&#x2F;otel-hook
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And autoload as you normally would! This example follows the standard practice of autoloading at the entrypoint of your PHP application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#867469;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;strict_types&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_PHP_AUTOLOAD_ENABLED=true&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_TRACES_EXPORTER=otlp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_EXPORTER_OTLP_PROTOCOL=grpc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_METRICS_EXPORTER=otlp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=grpc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_EXPORTER_OTLP_ENDPOINT=http:&#x2F;&#x2F;collector:4317&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_PHP_TRACES_PROCESSOR=batch&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_PROPAGATORS=b3,baggage,tracecontext&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;autoloading SDK example starting...&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; . PHP_EOL;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Composer autoloader will execute SDK&#x2F;_autoload.php which will register global instrumentation from environment configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;__DIR__&lt;&#x2F;span&gt;&lt;span&gt;) . &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&#x2F;vendor&#x2F;autoload.php&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;dev.openfeature.contrib.php.demo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;1.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getStringValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;dev.openfeature.contrib.php.version-value&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Version is &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; . $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there were no &lt;strong&gt;explicit actions&lt;&#x2F;strong&gt; necessary. However, the OpenTelemetry hook is set up at the API-level and providing tracing based on the configuration of your OTel exporter.&lt;&#x2F;p&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JSON Web Tokens: The Full Picture</title>
        <published>2023-08-06T00:00:00+00:00</published>
        <updated>2023-08-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/jwt-the-full-picture-jose/"/>
        <id>https://blog.carrio.dev/blog/jwt-the-full-picture-jose/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/jwt-the-full-picture-jose/">&lt;p&gt;JSON Web Tokens, commonly abbreviated as JWTs, are a standard that is a part of the JSON Object Signing and Encryption (JOSE) set of standards. There is a lot to break down here, depending on what you want to accomplish. JWTs are often conflated with a combination of these standards, which include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7518&quot;&gt;JSON Web Algorithms (JWA)&lt;&#x2F;a&gt;: Defines &lt;strong&gt;cryptographic algorithms&lt;&#x2F;strong&gt; and &lt;strong&gt;identifiers&lt;&#x2F;strong&gt; used across JOSE standards.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7517&quot;&gt;JSON Web Keys (JWK)&lt;&#x2F;a&gt;: Defines the JSON representation format for &lt;strong&gt;cryptographic keys&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7516&quot;&gt;JSON Web Encryption (JWE)&lt;&#x2F;a&gt;: Defines the JSON structure for representing &lt;strong&gt;encrypted&lt;&#x2F;strong&gt; content using JWA.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7515&quot;&gt;JSON Web Signatures (JWS)&lt;&#x2F;a&gt;: Defines the JSON structure for representing &lt;strong&gt;cryptographical veriable signatures&lt;&#x2F;strong&gt; of content using JWA.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7519&quot;&gt;JSON Web Tokens (JWT)&lt;&#x2F;a&gt;: Defines subject claims using JSON structures. These claims can be optionally protected via JWE or JWS.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That is a mouthful to say the least, but maybe you&#x27;re starting to see how there is a lot more to JWTs than you might originally think, especially when you go to a site like &lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&quot;&gt;jwt.io&lt;&#x2F;a&gt; that provides an opinionated example of a JSON Web Token protected with a JSON Web Signature. In fact, that page doesn&#x27;t even allow you to showcase an example of an unprotected JSON Web Token (e.g. &lt;code&gt;&amp;quot;alg&amp;quot;: &amp;quot;none&amp;quot;&lt;&#x2F;code&gt; in the header), so you can sort of understand just how JWTs have been adopted (and it has &lt;em&gt;something&lt;&#x2F;em&gt; to do with security).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-simple-jwt-starting-with-a-basic-example&quot;&gt;A Simple JWT: Starting with a Basic Example&lt;&#x2F;h2&gt;
&lt;p&gt;A JSON Web Token can optionally utilize no other JOSE protection (JWS&#x2F;JWE)- which is the simplest use case. The additional protections sort of build on top of this. To start, a JSON Web Token consists of a &lt;strong&gt;header&lt;&#x2F;strong&gt;, in the form of a JSON Web Key, and a &lt;strong&gt;payload&lt;&#x2F;strong&gt;, a JSON object which contains subject claims. The JWK header defines what algorithm is used for the JWT, and the basic case is that there is none.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;header: { &amp;quot;alg&amp;quot;: &amp;quot;none&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt;payload: { &amp;quot;sub&amp;quot;: &amp;quot;user@example.test&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, while technically JSON is used to define all of the structured data in JSON Web Tokens, the delivery format is entirely URL safe. Each of the parts of a JWT are encoded in a common manner:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;base64UrlEncode&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;utf8Encode&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    JSONObject
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: Binary data formats within the payload need to be worked around in their own way, and are not covered as part of the specification.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That encoding mechanism is applied individually to the header and payload, and the end result of each concatenated with &lt;code&gt;.&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;header  = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;{&amp;quot;alg&amp;quot;:&amp;quot;none&amp;quot;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;payload = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;{&amp;quot;sub&amp;quot;:&amp;quot;user@example.test&amp;quot;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;{&amp;quot;alg&amp;quot;:&amp;quot;none&amp;quot;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;eyJhbGciOiJub25lIn0K&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;{&amp;quot;sub&amp;quot;:&amp;quot;user@example.test&amp;quot;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;eyJzdWIiOiJ1c2VyQGV4YW1wbGUudGVzdCJ9Cg&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;jwt = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;eyJhbGciOiJub25lIn0K.eyJzdWIiOiJ1c2VyQGV4YW1wbGUudGVzdCJ9Cg&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;## encoded header ## ########### encoded payload ##########    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there are only two parts to this. This differs from a JWT you might see used in OpenID Connect OAuth flows, which will typically construct JWTs with some type of &lt;em&gt;secret&lt;&#x2F;em&gt; to support &lt;em&gt;validation&lt;&#x2F;em&gt; of tokens, a functionality of JSON Web Signatures. Let&#x27;s start to put together the building blocks to these cryptographic components of the JOSE standards.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;json-web-algorithms-or-definitions-we-ll-need-for-everything-else-really&quot;&gt;JSON Web Algorithms, or &amp;quot;Definitions We&#x27;ll Need For Everything Else, Really&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;Somewhere we need to define what &lt;code&gt;&amp;quot;alg&amp;quot;&lt;&#x2F;code&gt; and &lt;code&gt;&amp;quot;enc&amp;quot;&lt;&#x2F;code&gt; and all of these header keys &lt;em&gt;mean&lt;&#x2F;em&gt;. That&#x27;s what JWA, JSON Web Algorithms, defines. The header is primarily reserved for all of the cryptographic functionality, and being able to read this metadata to determine how to decrypt or validate tokens is one of the strong suits of JWTs.&lt;&#x2F;p&gt;
&lt;p&gt;The standard is defined in &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7518&quot;&gt;RFC-7518&lt;&#x2F;a&gt;, and that will provide all of the information you need on various supported algorithms, but I&#x27;ll give a few examples here to cover the use cases I&#x27;ll preset across this document.&lt;&#x2F;p&gt;
&lt;p&gt;As we&#x27;ll get to later, these definitions support the functionality of JSON Web Signatures (JWS) and JSON Web Encryption (JWE). The RFC is similarly broken down to cover each of these cases:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;json-web-signatures-jws&quot;&gt;JSON Web Signatures (JWS)&lt;&#x2F;h2&gt;
&lt;p&gt;JWS is focused on providing &lt;em&gt;verifiable&lt;&#x2F;em&gt; data. The metadata in the header will dictate how to verify the payload of the JWT using the &lt;em&gt;signature&lt;&#x2F;em&gt; appended to it.&lt;&#x2F;p&gt;
&lt;p&gt;You can provide the following (case-insensitive) values for &lt;code&gt;&amp;quot;alg&amp;quot;&lt;&#x2F;code&gt; keys in the header, which will apply a cryptographic signature utilizing the described algorithm:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HS256&lt;&#x2F;strong&gt;: HMAC using SHA-256&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HS384&lt;&#x2F;strong&gt;: HMAC using SHA-384&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HS512&lt;&#x2F;strong&gt;: HMAC using SHA-512&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RS256&lt;&#x2F;strong&gt;: RSASSA-PKCS1-v1_5 using SHA-256&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RS384&lt;&#x2F;strong&gt;: RSASSA-PKCS1-v1_5 using SHA-384&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RS512&lt;&#x2F;strong&gt;: RSASSA-PKCS1-v1_5 using SHA-512&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ES256&lt;&#x2F;strong&gt;: ECDSA using P-256 and SHA-256&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ES384&lt;&#x2F;strong&gt;: ECDSA using P-384 and SHA-384&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ES512&lt;&#x2F;strong&gt;: ECDSA using P-521 and SHA-512&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PS256&lt;&#x2F;strong&gt;: RSASSA-PSS using SHA-256 and MGF1 with SHA-256&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PS384&lt;&#x2F;strong&gt;: RSASSA-PSS using SHA-384 and MGF1 with SHA-384&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PS512&lt;&#x2F;strong&gt;: RSASSA-PSS using SHA-512 and MGF1 with SHA-512&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;none&lt;&#x2F;strong&gt;: No digital signature or MAC performed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;symmetric-hashing&quot;&gt;Symmetric Hashing&lt;&#x2F;h3&gt;
&lt;p&gt;HMAC, Hash-based Message Authentication Codes, are useful when you can utilize &lt;em&gt;shared&lt;&#x2F;em&gt; secrets. That is, the party creating the JWT and the party consuming the JWT both know of a secret value that is used to generate the signature and later verify it. When both parties are familiar with the secret and have communicated this securely, this form of cryptography is still hardened against man-in-the-middle attacks, since any intercepting party cannot manipulate the token and pass it on- once the body has changed the signature would no longer be valid. This is true outside of the very, &lt;em&gt;very&lt;&#x2F;em&gt; small probability of a hash collision. In the example of the weakest encryption suggested, which is SHA-256, that relates to 256 bits. In terms of how big a number that equates to, well, to quote Douglas Adams:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You just won&#x27;t believe how vastly, hugely, mind-bogglingly big it is.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But if you &lt;em&gt;must&lt;&#x2F;em&gt; know, &lt;code&gt;2^256 = 115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,639,936&lt;&#x2F;code&gt;, which happens to be a &lt;em&gt;mind-boggingly big&lt;&#x2F;em&gt; number.&lt;&#x2F;p&gt;
&lt;p&gt;A SHA-256 collision is about as likely as getting one Powerball ticket &lt;strong&gt;four&lt;&#x2F;strong&gt; weeks in a row and winning the maximum jackpot &lt;strong&gt;every time&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think it&#x27;s landed by now, and I&#x27;m just having fun with numbers now so I digress..&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asymmetric-hashing&quot;&gt;Asymmetric Hashing&lt;&#x2F;h3&gt;
&lt;p&gt;Also known as public-private key cryptography, asymmetric hashing allows you to have a party whose familiar with a &lt;em&gt;generative&lt;&#x2F;em&gt; secret, and the consuming parties can be configured with a &lt;em&gt;validation&lt;&#x2F;em&gt; secret. This approach is hardened not just against man-in-the-middle (MITM) attacks but also disallows the consumer to manipulate the JWT in any way either.&lt;&#x2F;p&gt;
&lt;p&gt;You will often see approaches like this utilized in OAuth systems since you can&#x27;t allow an OAuth client to not just validate access tokens but &lt;em&gt;manipulate&lt;&#x2F;em&gt; them in any way they would like.&lt;&#x2F;p&gt;
&lt;p&gt;Asymmetric algorithms power many tools we make use of today; it enables a &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc8446&quot;&gt;secure TLS handshake&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc4253&quot;&gt;secure shells&lt;&#x2F;a&gt;, extends and protects &lt;a href=&quot;https:&#x2F;&#x2F;gnupg.org&#x2F;&quot;&gt;email communication&lt;&#x2F;a&gt;, and more.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-hashing&quot;&gt;No Hashing&lt;&#x2F;h3&gt;
&lt;p&gt;Like we had shown in our example above, you can also specify not to use any algorithm. This would amount to no signature being generated at all, so you&#x27;re just passing a base64 encoded JSON object with some additional JSON metadata.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re using this approach, you &lt;em&gt;probably&lt;&#x2F;em&gt; shouldn&#x27;t even be using JWTs, unless that&#x27;s an imposed requirement and you are &lt;strong&gt;absolutely certain&lt;&#x2F;strong&gt; there are no security requirements on the exchanged data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;json-web-encryption-jwe&quot;&gt;JSON Web Encryption (JWE)&lt;&#x2F;h2&gt;
&lt;p&gt;In contrast to JWS, JWE is focused on protecting the data in transit. Where JWS protects your data from being manipulated in transit, JWE also protects your data from being &lt;strong&gt;read&lt;&#x2F;strong&gt; in transit. Only someone who has the necessary secrets to perform the decryption described by the metadata in the header will be able to do this.&lt;&#x2F;p&gt;
&lt;p&gt;In the header, the &lt;code&gt;&amp;quot;alg&amp;quot;&lt;&#x2F;code&gt; field will be used to describe the encryption algorithm, each respective one may include additional header fields accordingly. See the full specification under the JWE section of the JWA specification &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7518#section-4&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;RSA1_5&lt;&#x2F;strong&gt;: RSAES-PKCS1-v1_5&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RSA-OAEP&lt;&#x2F;strong&gt;: RSAES OAEP using default parameters&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RSA-OAEP-256&lt;&#x2F;strong&gt;: RSAES OAEP using SHA-256 and MGF1 with SHA-256&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A128KW&lt;&#x2F;strong&gt;: AES Key Wrap with default initial value using 128-bit key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A192KW&lt;&#x2F;strong&gt;: AES Key Wrap with default initial value using 192-bit key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A256KW&lt;&#x2F;strong&gt;: AES Key Wrap with default initial value using 256-bit key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;dir&lt;&#x2F;strong&gt;: Direct use of a shared symmetric key as the CEK&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ECDH-ES&lt;&#x2F;strong&gt;: Elliptic Curve key agreement using Concat KDF&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ECDH-ES+A128KW&lt;&#x2F;strong&gt;: ECDH-ES using Concat KDF and CEK wrapped with A128KW&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ECDH-ES+A192KW&lt;&#x2F;strong&gt;: ECDH-ES using Concat KDF and CEK wrapped with A192KW&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ECDH-ES+A256KW&lt;&#x2F;strong&gt;: ECDH-ES using Concat KDF and CEK wrapped with A256KW&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A128GCMKW&lt;&#x2F;strong&gt;: Key wrapping with AES GCM using 128-bit key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A192GCMKW&lt;&#x2F;strong&gt;: Key wrapping with AES GCM using 192-bit key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;A256GCMKW&lt;&#x2F;strong&gt;: Key wrapping with AES GCM using 256-bit key&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PBES2-HS256+A128KW&lt;&#x2F;strong&gt;: PBES2 with HMAC SHA-256 and &amp;quot;A128KW&amp;quot; wrapping&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PBES2-HS384+A192KW&lt;&#x2F;strong&gt;: PBES2 with HMAC SHA-384 and &amp;quot;A192KW&amp;quot; wrapping&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;PBES2-HS512+A256KW&lt;&#x2F;strong&gt;: PBES2 with HMAC SHA-512 and &amp;quot;A256KW&amp;quot; wrapping&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I won&#x27;t dive much farther into these, the important note here is that the header metadata maintains the definition for how these encryptions are applied, thus how the client would understand how to decrypt them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-structure-of-a-jwt&quot;&gt;The Structure of a JWT&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Required&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Header (defines whether to use JWS&#x2F;JWE&#x2F;none)&lt;&#x2F;li&gt;
&lt;li&gt;Payload&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Optional&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Signature (JWS)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;header&quot;&gt;Header&lt;&#x2F;h3&gt;
&lt;p&gt;The header of a JSON Web Token defines the cryptographic mechanism, as discussed in JWS&#x2F;JWE. This can be based on HMAC in combination with a common hashing algorithm like SHA-512 or asymmetric key cryptography such as RSA. The former allows for an opaque secret value to be used for generating the JWT signature which is also used to verify it. The latter utilizes public&#x2F;private key cryptography that allows you to generate a secret with a private key and utilize a public key, one that can be known by anyone without risking security around the tokens, to verify the signature of the JSON Web Token.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;payload&quot;&gt;Payload&lt;&#x2F;h3&gt;
&lt;p&gt;The payload of a JSON Web Token can contain any valid json object, Jwt&#x27;s do not have any further intrinsic limitations, but standards that build upon JWTs such as OpenID Connect use JWTs to provide stateless context in an access or identity token that can be utilized by resource servers or OAuth clients.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signature&quot;&gt;Signature&lt;&#x2F;h3&gt;
&lt;p&gt;Looking back at the header, we can reference the utilized &lt;strong&gt;algorithm&lt;&#x2F;strong&gt; and &lt;strong&gt;token type&lt;&#x2F;strong&gt;. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;json-web-keys&quot;&gt;JSON Web Keys&lt;&#x2F;h2&gt;
&lt;p&gt;These specify how to define cryptographic keys, typically used in combination with JWS&#x2F;JWE. This builds upon specification for JWA, and can be utilized to provide JSON Web Key Sets, which consumers of secured JWTs can reach out to in order to retrieve metadata for verifying tokens, as an example.&lt;&#x2F;p&gt;
&lt;p&gt;The RFC for for JSON Web Key includes &lt;a href=&quot;https:&#x2F;&#x2F;www.rfc-editor.org&#x2F;rfc&#x2F;rfc7517#appendix-A&quot;&gt;an example in Appendix A&lt;&#x2F;a&gt;, which offers both elliptic curve and RSA &lt;em&gt;public&lt;&#x2F;em&gt; keys for validating a JWT against its signature by the defined header metadata.&lt;&#x2F;p&gt;
&lt;p&gt;This piece of magic provides the mechanism for verification of JWS-secured JWTs with OAuth &#x2F; OpenID Connect.&lt;&#x2F;p&gt;
&lt;p&gt;An example of this in the wild would be Auth0&#x27;s JWKS. One is exposed for every customer, but because of the security provided by asymmetric cryptography, this &lt;em&gt;public&lt;&#x2F;em&gt; key serves no special purpose outside of verification of tokens. You cannot construct a JWT with a public key that can be verified by other consumers using that public key, so it&#x27;s still secure against attack vectors such as MITM.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;additional-reading&quot;&gt;Additional reading&lt;&#x2F;h2&gt;
&lt;p&gt;You can dig more into the official specification of JSON Web Tokens in IETF&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7519&quot;&gt;RFC-7519&lt;&#x2F;a&gt;. The JWT specification builds upon two other important standards, which are JSON Web Signatures (JWS) defined in &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7515&quot;&gt;RFC-7515&lt;&#x2F;a&gt; and JSON Web Encryption (JWE) defined in &lt;a href=&quot;https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;html&#x2F;rfc7516&quot;&gt;RFC-7516&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A great playground space for messing around with JWT&#x27;s is &lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&quot;&gt;jwt.io&lt;&#x2F;a&gt;. They have an interactive JSON Web Token editor that shows the raw JWT and a breakdown of its parts, even so far as allowing you to verify signatures.&lt;&#x2F;p&gt;
&lt;p&gt;There is a short&#x2F;long summary of the JOSE standards on StackOverflow &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;74257560&#x2F;what-is-the-difference-between-jose-jwa-jwe-jwk-jws-and-jwt&quot;&gt;here&lt;&#x2F;a&gt; as well, which I also found helpful when RFCs got a bit too boring.&lt;&#x2F;p&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Automating NLP Model Development with Dialogflow</title>
        <published>2023-08-05T00:00:00+00:00</published>
        <updated>2023-08-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/automate-dialogflow-nlp/"/>
        <id>https://blog.carrio.dev/blog/automate-dialogflow-nlp/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/automate-dialogflow-nlp/">&lt;h2 id=&quot;dialogflow&quot;&gt;Dialogflow&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;dialogflow&#x2F;&quot;&gt;Dialogflow&lt;&#x2F;a&gt; is a natural language processing system developed by Google. It provides all the constructs necessary in order to define a natural language processing model that can intelligently infer what a user is saying, but also providing various functionality on top of this including sentiment analysis and any recognition and more&lt;&#x2F;p&gt;
&lt;p&gt;At the time I was working on the &lt;a href=&quot;https:&#x2F;&#x2F;www.Dynatrace.com&#x2F;news&#x2F;blog&#x2F;davis-assistant-is-now-smarter-than-ever&#x2F;&quot;&gt;Davis Assistant&lt;&#x2F;a&gt; project at Dynatrace. After joining the team, I assisted with our project automation, TypeScript migration, and DevOps enhancements. One of my proposed projects thereafter was to completely automate our natural language processing definitions in such a way that it would also be entirely reusable inside of our codebase. Thus, not only would we have safe deployments and consistent definitions, they would be utilized inside of our APIs and hook directly into the domain logic of our system. As an example, this means the same enums powering various event definitions in Dialogflow training phrases could also be utilized in logic in our API handlers relating to them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dialogflow-s-natural-language-processing-model&quot;&gt;Dialogflow&#x27;s Natural Language Processing Model&lt;&#x2F;h2&gt;
&lt;p&gt;I won&#x27;t do a deep dive into this subject, as it&#x27;s now been several years and I definitely wouldn&#x27;t call myself an expert on it at this point. However, this gives you an idea of the various elements involved in defining an NLP model with Dialogflow, which is what the later solution automates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;entities&quot;&gt;Entities&lt;&#x2F;h3&gt;
&lt;p&gt;Referred to as Entity Types, these allow you to control how the user input data gets extracted. There are many predefined entity, which I&#x27;ll refer to as &lt;em&gt;default entities&lt;&#x2F;em&gt; later on in the automation. The entity type allows us to define many entries for a single entity, or synonyms. So you could recognize multiple specific &lt;em&gt;types&lt;&#x2F;em&gt; of &lt;strong&gt;fruit&lt;&#x2F;strong&gt;, like strawberries grapes and oranges, as a &lt;strong&gt;fruit&lt;&#x2F;strong&gt; entity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;intents&quot;&gt;Intents&lt;&#x2F;h3&gt;
&lt;p&gt;An Intent will categorize the intention of the user interaction. What these eventually break down for us, in the context of a tool like Davis Assistant, are the various user journeys of interactions with the bot. Think of the sentence &amp;quot;Show me the &lt;strong&gt;Apdex&lt;&#x2F;strong&gt; for &lt;strong&gt;Production&lt;&#x2F;strong&gt; over the &lt;strong&gt;last week&lt;&#x2F;strong&gt;&amp;quot;. We might have broken down that user journey as &amp;quot;application performance&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;For an Intent you can specify a number of &lt;em&gt;training phrases&lt;&#x2F;em&gt; and &lt;em&gt;parameters&lt;&#x2F;em&gt;. The &lt;em&gt;training phrases&lt;&#x2F;em&gt; can reference various entity types, custom or default, parts, and more. These become particularly useful as defined variables since many of the training phrases we&#x27;ll build out end up being permutations of the same input parameters, sometimes including a date or sometimes including an application name, etc. The &lt;em&gt;parameters&lt;&#x2F;em&gt; allow you to specify parts of the user input that you might want to extract, effectively acting as parameters to the intent &lt;em&gt;handlers&lt;&#x2F;em&gt; in our service.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;events&quot;&gt;Events&lt;&#x2F;h3&gt;
&lt;p&gt;While intents are typically matched when users provide some input phrase, we can also utilize events to trigger intents. This is particularly useful for directing user interactions in a similar fashion to invoking callbacks on various functionality in a system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;context&quot;&gt;Context&lt;&#x2F;h3&gt;
&lt;p&gt;An important component of our design was to support specific user&#x27;s and their data only during the lifecycle of their requests. When someone from Average Joe Gym says &amp;quot;Hey Google, talk to Davis Assistant&amp;quot; and asks a question about their website, we don&#x27;t need data about their tenant leaking into the rest of our user&#x27;s requests. We can utilize a context to fulfill metadata relevant to processing user input, such as application and service names and more that are available inside the Dynatrace tenants. We fulfill this context prior to executing the user action as best as possible so that user&#x27;s can naturally interact with Davis Assistant. Otherwise, references to your applications, like &amp;quot;the blog&amp;quot;, simply mean nothing to us.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;webhooks&quot;&gt;Webhooks&lt;&#x2F;h3&gt;
&lt;p&gt;Webhooks are very common in the industry today, and we can utilize them with Dialogflow to allow them to direct the processed user input to our services. When user input is processed and in intent and its parameters are determined, we&#x27;ll receive a request to our Router which handles the validation and forwarding of the request to our internal service for handling and responding to user interactions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;research&quot;&gt;Research&lt;&#x2F;h2&gt;
&lt;p&gt;Various tools were looked at in terms of how to support such a feature. Infrastructure-as-Code tools at the time didn&#x27;t support general purpose programming languages and general platforms, it was typically one or the other. Newer projects today may not have this limitation, such as Pulumi, but because of that a custom solution was the final option for how we would implement such functionality.&lt;&#x2F;p&gt;
&lt;p&gt;Our stack was now entirely in TypeScript as previously mentioned, and so the tool itself would need to be reusable inside of that code. Since we controlled all of the components of our system we didn&#x27;t need to implement this tool and such a manner to support a polyglot environment generating JSON definitions or the like. This gave us a lot of power and simplified the overall solution more, as opposed to requiring a code generator component as part of the integration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dialogflow-and-nodejs&quot;&gt;Dialogflow and NodeJS&lt;&#x2F;h2&gt;
&lt;p&gt;Google provided a NodeJS SDK for Dialogflow under the NPM package &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;googleapis&#x2F;nodejs-dialogflow&quot;&gt;nodejs-dialogflow&lt;&#x2F;a&gt;. This &lt;em&gt;was&lt;&#x2F;em&gt; a purely JavaScript package when this work started, and in our time utilizing Dialogflow we contributed the [@types&#x2F;dialogflow] package in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinitelyTyped&#x2F;DefinitelyTyped&quot;&gt;DefinitelyTyped&lt;&#x2F;a&gt; repository, helped facilitate resolution around &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DefinitelyTyped&#x2F;DefinitelyTyped&#x2F;pull&#x2F;39627&quot;&gt;typing chaos&lt;&#x2F;a&gt; during a package migration, and eased others over to the new &lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;@google-cloud&#x2F;dialogflow&quot;&gt;@google-cloud&#x2F;dialogflow&lt;&#x2F;a&gt; package after its release.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;migration-phase&quot;&gt;Migration Phase&lt;&#x2F;h2&gt;
&lt;p&gt;One component of the project was the ability to synchronize the definitions in our code to Dialogflow servers, but during the development phase of the project we also had to be able to continue utilizing the Dialogflow UI. As such, I also implemented a capability for importing Dialogflow resources and automatically generating all of the necessary entity types, contexts, events, intents, and more. You could simply export the Dialogflow project to a file and then run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# given you had installed `@0xc&#x2F;dialogflow-as-code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;dialogflow-as-code -i&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;export-dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;src&#x2F;dialogflow
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you now had an entire set of Dialogflow-as-Code source code in TypeScript that defined &lt;strong&gt;all&lt;&#x2F;strong&gt; of your project resources. This functionality made the continuous integration of UI changes into our source code possible until we flipped the responsibilities, eventually making our source code the source of truth for our Dialogflow project. We still had the ability to triage issues in the web interface when necessary, but due to the change our environment inconsistencies dropped significantly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-time&quot;&gt;Example Time&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You can find out more about each of these types of resources on &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;dialogflow&#x2F;cx&#x2F;docs&#x2F;concept&quot;&gt;the Dialogflow documentation site&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Sample Entity Type Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;entityType&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;fruit&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;syn&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;apple&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;syn&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;strawberry&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)])
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;ek&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Sample Entity Type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etSample&lt;&#x2F;span&gt;&lt;span&gt;: EntityType = {
&lt;&#x2F;span&gt;&lt;span&gt;  displayName: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  entities: [{ value: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, synonyms: [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;piece&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;swab&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;choice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }],
&lt;&#x2F;span&gt;&lt;span&gt;  kind: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;KIND_MAP&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  autoExpansionMode: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;AUTO_EXPANSION_MODE_DEFAULT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Sample Context Builder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;cxFruit &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;fruit-context&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;lc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;date-time-original&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;string_value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Sample Events
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export enum &lt;&#x2F;span&gt;&lt;span&gt;Event {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;FEEDBACK &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;FEEDBACK&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Sample Intent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; prettier-ignore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;ntFruitInfo &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;intent&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;fruitInfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;priority&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;LOW&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;webhook&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;trainingPhrases&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;tp&lt;&#x2F;span&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;describe the &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; of &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; over &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;det&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;date-time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;tp&lt;&#x2F;span&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;how was the &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; of &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit&lt;&#x2F;span&gt;&lt;span&gt;]),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;tp&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; of &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot; &amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;det&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;date-time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;tp&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; of &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit&lt;&#x2F;span&gt;&lt;span&gt;]),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;tp&lt;&#x2F;span&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;what was the &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; of &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot; &amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;det&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;date-time&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;tp&lt;&#x2F;span&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;what was the &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; of &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit&lt;&#x2F;span&gt;&lt;span&gt;]),
&lt;&#x2F;span&gt;&lt;span&gt;  ])
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;I&amp;#39;m sorry Dave, I can&amp;#39;t do that&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;([&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Second response&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;  ])
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;events&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;FEEDBACK&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;outputContexts&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;cxFruit&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;followUpOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;ntFruitReminder&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Sample Resource Build and Sync Script
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;svcAcctKeyJson&lt;&#x2F;span&gt;&lt;span&gt;: string = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;.&#x2F;service-account-key.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;svcAcctConfig&lt;&#x2F;span&gt;&lt;span&gt;: DialogflowServiceAccount = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;.${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;svcAcctKeyJson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;KEY_FILENAME&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;svcAcctKeyJson&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;DIALOGFLOW_CONFIG&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;svcAcctConfig&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;resources &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;DialogflowBuilder&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;entityTypes&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etSample&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;etFruit&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;intents&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;ntFruitInfo&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;ntFruitReminder&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Container&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;DialogflowCreator&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;&#x2F;h2&gt;
&lt;p&gt;The outcome of the project: Dialogflow-as-Code. This package was made available as &lt;code&gt;@0xc&#x2F;dialogflow-as-code&lt;&#x2F;code&gt; on the NPM registry through an open source project on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tcarrio&#x2F;dialogflow-as-code&quot;&gt;my GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Domain-Driven Design Patterns: An Introduction</title>
        <published>2023-07-29T00:00:00+00:00</published>
        <updated>2023-07-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/ddd-patterns-intro/"/>
        <id>https://blog.carrio.dev/blog/ddd-patterns-intro/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/ddd-patterns-intro/">&lt;p&gt;What this post is, and what is isn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;This post is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A brief intro to what &lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;bliki&#x2F;DomainDrivenDesign.html&quot;&gt;DDD&lt;&#x2F;a&gt; is.&lt;&#x2F;li&gt;
&lt;li&gt;Covering some tactical design patterns for DDD.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This post is not:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Covering strategic design patterns, e.g. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Event_storming&quot;&gt;Event Storming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;bliki&#x2F;DomainDrivenDesign.html&quot;&gt;Domain-driven design (DDD)&lt;&#x2F;a&gt; is an approach I&#x27;ve taken on various projects historical and one that I&#x27;m still not sure I&#x27;ve entirely &lt;em&gt;mastered&lt;&#x2F;em&gt;. There is a lot of nuance to DDD, namely the matter of buy-in from stakeholders across the organization, truly working hand-in-hand with domain experts, assuming you have them- and if you don&#x27;t, then also building up that expertise in your team- and finally championing that mentality across all of the silos in your workplace. &lt;em&gt;Everyone&lt;&#x2F;em&gt; needs to be on board, and that&#x27;s just from a &lt;em&gt;strategic&lt;&#x2F;em&gt; design standpoint. Practicing domain-driven design is hard, much like software engineering can be in general, but it&#x27;s also a foreign concept to many developers out there.&lt;&#x2F;p&gt;
&lt;p&gt;The core of domain-driven design, in my own words:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Domain-driven design is about designing your software in the way the business domain is structured, from the terminology used by each context of your product to the naming of your programming constructs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;By most DDD practicioners&#x27; standards: your domain experts should be able to understand what&#x27;s happening in your code without being a programmer. This relates only to the domain portion of your code, and in many architectural approachs to software such as [hexagonal architecture], you would have that complete separation of the core domain logic from any application or infrastructure logic. These often pair well DDD, and there are many examples of implementing tactical DDD patterns online.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reading-resources&quot;&gt;Reading Resources&lt;&#x2F;h2&gt;
&lt;p&gt;The absolute classics are the original &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;0321125215&quot;&gt;Eric Evans blue book, Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;0321834577&quot;&gt;Vaughn Vernon red book Implementing Domain-Driven Design&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;identifying-the-structure-of-the-business-domain&quot;&gt;Identifying the structure of the business domain&lt;&#x2F;h2&gt;
&lt;p&gt;This is the part I mentioned this post would NOT be. I&#x27;ll only cover some terminology that will be useful within this post:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Domain&lt;&#x2F;strong&gt;: Outside of DDD, this is defined as &amp;quot;a specified sphere of activity or knowledge&amp;quot;, which captures the essence well. This encapsulates both &lt;em&gt;what&lt;&#x2F;em&gt; your product does, and &lt;em&gt;how&lt;&#x2F;em&gt; it does it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Subdomain&lt;&#x2F;strong&gt;: Your domain often will be split up into various subdomains, especially if it is as a whole a very broad concept. There are several types of subdomains, including &lt;em&gt;core&lt;&#x2F;em&gt;, &lt;em&gt;supporting&lt;&#x2F;em&gt;, and &lt;em&gt;generic&lt;&#x2F;em&gt; subdomains. The &lt;em&gt;core&lt;&#x2F;em&gt; subdomain would be the primary focus of your product and the value it offers that makes it great. A &lt;em&gt;supporting&lt;&#x2F;em&gt; subdomain is important for the product to succeed, but not the primary focus. A &lt;em&gt;generic&lt;&#x2F;em&gt; subdomain contains nothing &lt;em&gt;special&lt;&#x2F;em&gt; to the organization, but is necessary for the solution to work (think IAM or ERP platforms).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;bliki&#x2F;UbiquitousLanguage.html&quot;&gt;Ubiquitous Language&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;: Specific to each bounded context, the language is agreed upon and standard for how to refer to each component in the system. Domain experts and software engineers can easily discuss features because the ubiquitous language is consistent from design to implementation. As you can imagine, this takes a lot of interaction between domain experts and the programmers building the software.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;bliki&#x2F;BoundedContext.html&quot;&gt;Bounded Context&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;: This is a specific subset of the overall domain where ubiquitous language is consistent. Often times the best structure for bounded contexts is 1:1 with subdomains of your system, but like many things in SWE this is situational. Not only is this a specific context, but there is well defined boundary for the context. This separates the components of your system linguistically, so the same terminology such as &amp;quot;Account&amp;quot; may not mean the same thing between two contexts, such as &amp;quot;Checkings&amp;quot; context and &amp;quot;Savings&amp;quot; context for a &amp;quot;Banking&amp;quot; domain. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Context Map&lt;&#x2F;strong&gt;: These define what the boundaries of the various contexts are, how contexts will communicate, how mappings between entities and other constructs will be done between contexts (e.g. translating the ubiquoutous language), how to protect against unwanted changes in upstream contexts, or how to ensure stability for downstream contexts.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That is a lot to gather without much &lt;em&gt;context&lt;&#x2F;em&gt;, and if you are interested in the strategic design elements you should read more on it from the &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;0321125215&quot;&gt;blue book&lt;&#x2F;a&gt; and&#x2F;or &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;gp&#x2F;product&#x2F;0321834577&quot;&gt;red book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;domain-objects&quot;&gt;Domain Objects&lt;&#x2F;h2&gt;
&lt;p&gt;Even in 2003, Evans&#x27; &lt;a href=&quot;https:&#x2F;&#x2F;martinfowler.com&#x2F;bliki&#x2F;EvansClassification.html&quot;&gt;classified&lt;&#x2F;a&gt; some of the still relevant types of domain objects you&#x27;ll find in domain-driven design. These classifications include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entities&lt;&#x2F;strong&gt;: A distinctly identifiable object.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Value Objects&lt;&#x2F;strong&gt;: An object that matters only as an combination of its properties. There is no identifier for a value object, only what it contains.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Services&lt;&#x2F;strong&gt;: Typically stateless, these can provide a standalone operation within the context your domain.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Types from other patterns such as enterprise architecture, layered architecture, design patterns and more have been mostly adopted into domain-driven design as well, and you&#x27;ll commonly see many of the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aggregates&lt;&#x2F;strong&gt;: An entity that defines the transactional boundary of logical operations within a context. It controls the entities beneath it, exposes functionality to domain logic that can impact those entities, but does not allow access to those nested entities. When the aggregate is persisted, the operations of root aggregate entity and all of the related entities must all successfully complete or the transaction will be rolled back. In this way, aggregates are atomic.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Domain Events&lt;&#x2F;strong&gt;: Events that signify specific, important happenings within a bounded context. This is a common way to communicate across bounded contexts while also reducing coupling of services.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Repositories&lt;&#x2F;strong&gt;: An abstraction over a collection of domain entities. This typically follows a collection-like or persistence-based approach. The repository mediates between the domain and data-mapping layers of the system.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Factory&lt;&#x2F;strong&gt;: A creational design pattern, which in its simplest form is an object that creates other objects. There are more specific subsets of the Factory pattern that support polymorphic return types as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Depending on which DDD tactical design patterns you implement, you may also end up seeing terminology like CQRS. We&#x27;ll hold off on diving any deeper for now.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;applied-domain-patterns&quot;&gt;Applied Domain Patterns&lt;&#x2F;h3&gt;
&lt;p&gt;The following adapts some of the code from a Destiny bot project a friend of mine was working on. The code was originally in JavaScript at the time and I thought I would convert it to utilize more domain-driven design patterns instead.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By my standards, this is still a work in progress, but it&#x27;s a start.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F;&#x2F; Domain layer: Value Objects, Entities, Aggregates
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export abstract class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;ValueObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;StringValueObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;ValueObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;&amp;lt;string&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;NumberValueObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;ValueObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;&amp;lt;number&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Hex = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Hex2 = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Hex3 = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Hex4 = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Hex8 = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Hex12 = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;FOUR = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;AB89 = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;|&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;UuidV4 = `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;FOUR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Hex3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;AB89&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;HEX3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}-${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;HEX12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Uuid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;ValueObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;&amp;lt;UuidV4&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private static readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;REGEX &lt;&#x2F;span&gt;&lt;span&gt;= &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[0-9a-f]&lt;&#x2F;span&gt;&lt;span&gt;{8}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[0-9a-f]&lt;&#x2F;span&gt;&lt;span&gt;{4}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;-4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[0-9a-f]&lt;&#x2F;span&gt;&lt;span&gt;{3}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[89ab][0-9a-f]&lt;&#x2F;span&gt;&lt;span&gt;{3}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[0-9a-f]&lt;&#x2F;span&gt;&lt;span&gt;{12}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;UuidV4&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;void {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Uuid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;REGEX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.value), &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Value was not a valid Version 4 UUID&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;StringValueObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private static readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;REGEX &lt;&#x2F;span&gt;&lt;span&gt;= &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;@]&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;@]&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;void {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;REGEX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.value), &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Value was not a valid email address&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;StringValueObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private static readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;REGEX &lt;&#x2F;span&gt;&lt;span&gt;= &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;@]&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;@]&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Username&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;void {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;REGEX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.value), &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Value was not a valid email address&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Entities &amp;amp; Aggregates
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export interface &lt;&#x2F;span&gt;&lt;span&gt;Entity {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: Uuid;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Uuid&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export type &lt;&#x2F;span&gt;&lt;span&gt;Aggregate = Entity;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Aggregate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Entity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Aggregate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Uuid,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Email,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;firstName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;StringValueObject,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;StringValueObject,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Username,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F;&#x2F; Domain Repositories
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; A collection-oriented repository:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;Repository&amp;lt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span&gt;Entity&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;: T): Promise&amp;lt;void&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;: T): Promise&amp;lt;void&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;: T): Promise&amp;lt;void&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; A collection-oriented repository:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;PersistenceRepository&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Repository&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;persist&lt;&#x2F;span&gt;&lt;span&gt;(): Promise&amp;lt;void&amp;gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;UserRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Repository&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;User&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;existsByUsername&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: string): Promise&amp;lt;boolean&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F;&#x2F; Infrastructure layer: We implement our interfaces 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;MongooseSchema&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;criteria&lt;&#x2F;span&gt;&lt;span&gt;: Partial&amp;lt;T&amp;gt;): Command&amp;lt;boolean&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;updateOne&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;criteria&lt;&#x2F;span&gt;&lt;span&gt;: Partial&amp;lt;T&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;: MongooseOperation&amp;lt;T&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;callback&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;?: Error) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;any
&lt;&#x2F;span&gt;&lt;span&gt;  ): Promise&amp;lt;void&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;MongooseOperation&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;$set&lt;&#x2F;span&gt;&lt;span&gt;: Partial&amp;lt;T&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;Command&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;(): Promise&amp;lt;T&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;UserSchema {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;firstName&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: string,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;PersistenceObject {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span&gt;(): Promise&amp;lt;void&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;PersistenceObjectFactory&amp;lt;T&amp;gt; = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;: T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;PersistenceObject;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;export class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;MongoUserRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;UserRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;MongooseSchema&amp;lt;UserSchema&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;PersistenceObjectFactory&amp;lt;User&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;logger&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Logger,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{ }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userModel &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userModel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;updateModel &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      email: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      firstName: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;firstName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      lastName: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;lastName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      username: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;updateOne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      { id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.id },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      { $set: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;updateModel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;deleteOne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;({ id: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.id });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;existsByUsername&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;boolean&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;schema&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SOLID Principles: Dependency Inversion</title>
        <published>2023-07-29T00:00:00+00:00</published>
        <updated>2023-07-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/solid-dependency-inversion/"/>
        <id>https://blog.carrio.dev/blog/solid-dependency-inversion/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/solid-dependency-inversion/">&lt;p&gt;SOLID constitutes five design principles focused on making object-oriented designs more maintainable, understable, and flexible. The principles of SOLID are:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;S&lt;&#x2F;strong&gt;ingle-responsibility principle&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;O&lt;&#x2F;strong&gt;pen-closed principle&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;L&lt;&#x2F;strong&gt;iskov substitution principle&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I&lt;&#x2F;strong&gt;nterface segregation principle&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;D&lt;&#x2F;strong&gt;ependency inversion principle&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I&#x27;m going to cover the final principle, &lt;strong&gt;Dependency Inversion&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-dependency-inversion&quot;&gt;What is Dependency Inversion&lt;&#x2F;h2&gt;
&lt;p&gt;In a few words, the Dependency Inversion principle (DIP) can be described as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Depend on abstractions, not concretions&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In many object-oriented languages, abstractions would often refer to an Interface and concretions on a Class implementation of it. There are several benefits that come from this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Decoupling of components&lt;&#x2F;em&gt;: DIP encourages the decoupling of high-level modules from low-level modules. By introducing abstractions and interfaces, it allows components to interact with each other without needing to know specific implementation details. This reduces the tight coupling between modules, making the code more flexible and easier to maintain.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Reusability&lt;&#x2F;em&gt;: With DIP, components depend on abstractions rather than concrete implementations. This promotes reusability as multiple implementations can be created for the same interface, allowing different components to use them interchangeably.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Testability&lt;&#x2F;em&gt;: By programming to interfaces rather than concrete classes, unit testing becomes easier. Mocking or stubbing interfaces during testing becomes straightforward, enabling more effective and isolated testing of individual components.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Encourages a stable architecture&lt;&#x2F;em&gt;: Following DIP leads to a more stable architecture as changes to low-level modules or concrete implementations are less likely to affect higher-level modules. This principle facilitates the &amp;quot;Open&#x2F;Closed Principle&amp;quot; (OCP) by allowing the system to be easily extended with new functionalities without modifying existing code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Inversion of control (IoC)&lt;&#x2F;em&gt;: DIP is often associated with IoC containers that manage the creation and resolution of dependencies. By using an IoC container, the responsibility for managing object instantiation and dependency resolution is shifted from the application code to the container, simplifying the overall design and promoting a more modular and maintainable structure.&lt;&#x2F;p&gt;
&lt;p&gt;While there are many benefits to following DIP, I would still warn that there are definitely some downfalls to &lt;em&gt;over-applying&lt;&#x2F;em&gt; this pattern. However, it generally leaves your project in a significantly better state for future changes and growth.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;This example dives into an application of the dependency inversion principle, but it inadvertently will also showcase a couple of other patterns closely related to this, including the general pattern of Inversion of Control and the Dependency Injection pattern, whose functionality is often provided by some application framework like Spring.&lt;&#x2F;p&gt;
&lt;p&gt;Here, we&#x27;ll have some application which manipulates users in the system. We will have a UserService and a UserRepository, and the UserRepository will be an &lt;strong&gt;interface&lt;&#x2F;strong&gt; as opposed to a specific implementation. The UserRepository is implemented by multiple classes, and in this case we have an implementation backed by MySQL and another by Redis. However, the UserService itself has no knowledge of which implementation it is interacting with, and never should. It only cares about the contract in which it interacts with the instance it has a reference to.&lt;&#x2F;p&gt;
&lt;p&gt;To start off, I&#x27;ll define a core model I won&#x27;t include in the graph below but will be necessary regardless. The &lt;code&gt;User&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we can define our abstraction around interacting with the Users in the system. In my case, I would be defining the UserRepository as a collection-like interface (no necessary &lt;code&gt;persist()&lt;&#x2F;code&gt; calls on the Repository to push updates to the data store).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;UserRepository {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;nextId&lt;&#x2F;span&gt;&lt;span&gt;(): Promise&amp;lt;string&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: User): Promise&amp;lt;void&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: User): Promise&amp;lt;void&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;findByEmail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: string): Promise&amp;lt;User&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, I haven&#x27;t actually implemented this repository yet, but I can already start to envision my domain service, where I&#x27;ll provide functionality for creating a User with their email.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;UserService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;UserRepository&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;createNewUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;findByEmail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;nextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! We&#x27;re going to be creating user&#x27;s with this service, now let&#x27;s really implement a UserRepository that we can get started with. I&#x27;m going to use a simple in-memory backend like Redis here. I might lose everything when I restart Redis but I just want to test the system out locally for now.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;RedisUserRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;UserRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private static readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;PREFIX &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Redis&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;nextId&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;string&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;uuid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;calculateKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;serializeUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;del&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;calculateKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;findByEmail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;User&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;matchingKeys &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;scan&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;0 MATCH user::*::${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;base64Encode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;matchingKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.length &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;NotFoundException();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;matchingKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.length &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;MultipleUsersForSameEmailException();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;matchingKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user &lt;&#x2F;span&gt;&lt;span&gt;=== &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;deserializeUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;calculateKey&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;RedisUserRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;PREFIX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;}::${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;base64Encode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;)}::${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;base64Encode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;base64Encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Buffer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;base64&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;deserializeUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;serializeUser&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;JSON.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to actually instantiate all of these things. Here I&#x27;ll build out my application container that creates instances of these components and wires it all together. Many people prefer to use a Dependency Injection framework to accomplish this, but I&#x27;m keeping this post example simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;createClient &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;ApplicationContainer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;bootstrap&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;startUp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;shutDown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;startUp&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;createClient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Redis Client Error&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;RedisUserRepository(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userService &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;UserService(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userService&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;createNewUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;username@example.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;shutDown&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;disconnect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;new ApplicationContainer().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;bootstrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything is working great so far. I&#x27;d like to build out an implementation now that backs itself on the same data store the rest of our production services run on- MySQL! Let&#x27;s see what that looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;MySQLUserRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;UserRepository &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;connection&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;MySQL&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;nextId&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;string&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;uuid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;connection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;INSERT INTO `Users` VALUES (?, ?);&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;connection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;DELETE FROM `Users` WHERE `id` = ?;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.id);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;findByEmail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;User&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;connection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;queryRows&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;SELECT * FROM `Users` ORDER BY `id` ASC;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.length &lt;&#x2F;span&gt;&lt;span&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;NotFoundException();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.length &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;throw &lt;&#x2F;span&gt;&lt;span&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;MultipleUsersForSameEmailException();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we&#x27;ll update the Application Container to create the MySQLUserRepository instance and pass that in instead. All set to go!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;mysql2&#x2F;promise&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;ApplicationContainer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;bootstrap&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;startUp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;shutDown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;protected static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;startUp&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mysql &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;createConnection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;({host:&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, user: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, database: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;protected static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;MySQLUserRepository(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userService &lt;&#x2F;span&gt;&lt;span&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;UserService(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userRepository&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userService&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;createNewUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;username@example.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;protected static async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;shutDown&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;Promise&amp;lt;void&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;new ApplicationContainer().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;bootstrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see from this, none of our logic needed to change around the actual business logic layer of our code. This is also why Dependency Inversion is seen as one way to facilitate Inversion of Control, as we are passing dependencies from the top down as opposed to calling or creating external modules within our domain logic.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a graph of how these interfaces, class implementations, and the application container relate to each other:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;┌──────────────────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│                      │
&lt;&#x2F;span&gt;&lt;span&gt;│     Application      │    passes instance to
&lt;&#x2F;span&gt;&lt;span&gt;│     Container        ├────────────────────────┐
&lt;&#x2F;span&gt;&lt;span&gt;│                      │                        │
&lt;&#x2F;span&gt;&lt;span&gt;└──────────────┬───────┘                        │
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                     ┌──────────▼──────────┐
&lt;&#x2F;span&gt;&lt;span&gt;               │                     │      UserService    │
&lt;&#x2F;span&gt;&lt;span&gt;               │                     │                     │
&lt;&#x2F;span&gt;&lt;span&gt;               │                     └──────────┬──────────┘
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;          instantiates                   interacts with
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                     ┌──────────┴──────────┐
&lt;&#x2F;span&gt;&lt;span&gt;               │                     │   UserRepository    │
&lt;&#x2F;span&gt;&lt;span&gt;               │                     │                     │
&lt;&#x2F;span&gt;&lt;span&gt;               │                     └──────────┬──────────┘
&lt;&#x2F;span&gt;&lt;span&gt;               │                                │
&lt;&#x2F;span&gt;&lt;span&gt;               │                    ┌───────────┴─────────────┐
&lt;&#x2F;span&gt;&lt;span&gt;               │                    │      implements         │
&lt;&#x2F;span&gt;&lt;span&gt;               │                    │                         │
&lt;&#x2F;span&gt;&lt;span&gt;               │                    │                         │
&lt;&#x2F;span&gt;&lt;span&gt;               │         ┌──────────┴──────────┐   ┌──────────┴──────────┐
&lt;&#x2F;span&gt;&lt;span&gt;               │         │ MySQLUserRepository │   │ RedisUserRepository │
&lt;&#x2F;span&gt;&lt;span&gt;               └─────────►                     │   │                     │
&lt;&#x2F;span&gt;&lt;span&gt;                         └─────────────────────┘   └─────────────────────┘
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Notes on algorithms</title>
        <published>2023-07-28T00:00:00+00:00</published>
        <updated>2023-07-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/algorithms-notes/"/>
        <id>https://blog.carrio.dev/blog/algorithms-notes/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/algorithms-notes/">&lt;p&gt;This was exported from an &lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;org-mode&lt;&#x2F;a&gt; notebook documenting various
algorithm knowledge, with some example code snippets here and there
implementing and executing algorithms inline.&lt;&#x2F;p&gt;
&lt;p&gt;Code is reused where possible, such as algorithm implementations being
defined in one section with multiple data tests in others, referencing
that function.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This post is a bit different, as I am documenting this for myself only- and I&#x27;m sorry if I lead you astray :)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;preface&quot;&gt;Preface&lt;&#x2F;h1&gt;
&lt;p&gt;Since this is an &lt;strong&gt;org-mode&lt;&#x2F;strong&gt; notebook, it&#x27;s actually possible to
evaluate code using
&lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;worg&#x2F;org-contrib&#x2F;babel&#x2F;&quot;&gt;Babel&lt;&#x2F;a&gt;. As a bit of an
org-mode novice, I&#x27;m not familiar with all of the capabilities, but it
is possible to share sessions between source code snippets. Due to this,
there are some shared functions I will define that will be reused across
the notebook.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shared-code&quot;&gt;Shared code&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;swap_indices&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    array[i], array[j] = array[j], array[i]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;debug_state = {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(debug_state[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(content)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;logger = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;set_debugging&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    debug_state[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;enabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = enabled
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;algorithms-terminology&quot;&gt;Algorithms Terminology&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;cardinality&quot;&gt;Cardinality&lt;&#x2F;h2&gt;
&lt;p&gt;The size of the data. For set, arrays, or tuples, it&#x27;s the number of
elements stored in it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;regression&quot;&gt;Regression&lt;&#x2F;h2&gt;
&lt;p&gt;Predicting a response. An example of this is K-Nearest Neighbor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classification&quot;&gt;Classification&lt;&#x2F;h2&gt;
&lt;p&gt;Categorization into a group. See features.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;feature&quot;&gt;Feature&lt;&#x2F;h2&gt;
&lt;p&gt;Attributes or tangible data points that can be construed about the data
set.&lt;&#x2F;p&gt;
&lt;p&gt;Take for example, fruit, you might compare color and size.&lt;&#x2F;p&gt;
&lt;p&gt;For another example, consider a pizza storefront. You might utilize a
number of features, such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The day of the week (Sunday is 0, Monday is 1, ... Saturday is 6)&lt;&#x2F;li&gt;
&lt;li&gt;Weekend or holiday (Yes is 1, No is 0)&lt;&#x2F;li&gt;
&lt;li&gt;Is it a game day (Yes is 1, No is 0)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And so on. These could be used to guess what a likely outcome of another
datapoint might be.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;heuristic&quot;&gt;Heuristic&lt;&#x2F;h2&gt;
&lt;p&gt;Unlike an algorithm, which always produces a correct result, a heuristic
usually does a godo job but does not provide any guarantees.&lt;&#x2F;p&gt;
&lt;p&gt;To provide a more direct definition:&lt;&#x2F;p&gt;
&lt;p&gt;&amp;gt; proceeding to a solution by trial and error or by rules that are only
loosely defined.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-general-terms&quot;&gt;More general terms&lt;&#x2F;h2&gt;
&lt;h1 id=&quot;arrays&quot;&gt;Arrays&lt;&#x2F;h1&gt;
&lt;p&gt;Arrays are continugous data structures. They provide instant access
(O(1)) to any element of the array by index. They are limited in
removals and insertions though, requiring on average O(n) time to insert
or delete elements from the array.&lt;&#x2F;p&gt;
&lt;p&gt;For removals, this is because any element to the right of the element
needs to be shifted left.&lt;&#x2F;p&gt;
&lt;p&gt;For insertions, this is because any element to the right of the element
needs to be shifted right.&lt;&#x2F;p&gt;
&lt;p&gt;So on average, since (n + 0)&#x2F;2 or 1&#x2F;2 * n, this equates to O(n).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sorting-algorithms&quot;&gt;Sorting algorithms&lt;&#x2F;h2&gt;
&lt;p&gt;There are many sorting algorithms relevant to array data structures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;insertion-sort&quot;&gt;Insertion sort&lt;&#x2F;h3&gt;
&lt;p&gt;This is one of the more simple sorting algorithms, and has a complexity
of O(n^2^). The logic for this is simple.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Start from the beginning of the array&lt;&#x2F;li&gt;
&lt;li&gt;Step forward&lt;&#x2F;li&gt;
&lt;li&gt;If the current element is less than the previous element&lt;&#x2F;li&gt;
&lt;li&gt;If the current element is less than the previous element, walk
backwards in the array until either you reach an element that is
less than the current element, or the beginning of the list, and
place it there&lt;&#x2F;li&gt;
&lt;li&gt;If not at the end of the array, repeat from step 2&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;An example implementation for this would be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;insertion_sort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Starting from position 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    backwards_index = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Starting iterations...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;forwards_index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(array)):
&lt;&#x2F;span&gt;&lt;span&gt;        backwards_index = forwards_index
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Finding the best place for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(array[forwards_index]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(backwards_index &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;and array[backwards_index] &amp;lt; array[backwards_index-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Swapping from position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; to position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(backwards_index, backwards_index-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# array[backwards_index], array[backwards_index-1] = array[backwards_index-1], array[backwards_index]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;swap_indices&lt;&#x2F;span&gt;&lt;span&gt;(array, backwards_index, backwards_index-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            backwards_index = backwards_index-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Found the resting place for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(array[forwards_index]))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Examples&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;random
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;set_debugging&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# always generates a list from 1-13 with 4 instances of each integer
&lt;&#x2F;span&gt;&lt;span&gt;arr = [x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;shuffle&lt;&#x2F;span&gt;&lt;span&gt;(arr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;The randomized array&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(arr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;insertion_sort&lt;&#x2F;span&gt;&lt;span&gt;(arr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;The sorted array&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(arr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;example&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-example &quot;&gt;&lt;code class=&quot;language-example&quot; data-lang=&quot;example&quot;&gt;&lt;span&gt;The sorted array
&lt;&#x2F;span&gt;&lt;span&gt;[1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;lists&quot;&gt;Lists&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;graphs&quot;&gt;Graphs&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;trees&quot;&gt;Trees&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Trees are a special type of graph. The properties of a tree are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A non-linear data structure&lt;&#x2F;li&gt;
&lt;li&gt;Always has n-1 edges for n nodes&lt;&#x2F;li&gt;
&lt;li&gt;Edges are always directed&lt;&#x2F;li&gt;
&lt;li&gt;There is a root node&lt;&#x2F;li&gt;
&lt;li&gt;A node can only have up to one parent&lt;&#x2F;li&gt;
&lt;li&gt;There are no cycles&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;terminology&quot;&gt;Terminology&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Root node&lt;&#x2F;p&gt;
&lt;p&gt;The topmost node in a tree. It has no parent, unlike the rest of the
tree&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Parent&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, its parent is the node pointing to it&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Child&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, a child is a node it points to&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Leaf node&lt;&#x2F;p&gt;
&lt;p&gt;A node that has no children. Also referred to as an external node&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Non-leaf node&lt;&#x2F;p&gt;
&lt;p&gt;A node that does have children. Also referred to as an internal node&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Path&lt;&#x2F;p&gt;
&lt;p&gt;A sequence of edges connecting a starting node to an end node.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Edge&lt;&#x2F;p&gt;
&lt;p&gt;A link between two node, just like in a graph. This must be
directed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ancestor&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, an ancestor is any node that is its parent,
or a parent of its parent, and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Descendant&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, a descendent is any node that is its child,
or a child of its child, and so on.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sibling&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, a sibling is any node that shares the same
parent as it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Degree&lt;&#x2F;p&gt;
&lt;p&gt;The number of children a node has.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Depth of a node&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, this is the number of edges between the root
node and it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Height of a node&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, this is the longest path that exists between
it and any of its descendant leaf nodes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Level of a node&lt;&#x2F;p&gt;
&lt;p&gt;In relation to a node, the number of edges that exist from the root
node to it. Typically, depth of node + 1.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rooted tree&lt;&#x2F;p&gt;
&lt;p&gt;A binary tree that has a root node and every node has at most two
children.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Full tree&lt;&#x2F;p&gt;
&lt;p&gt;A binary tree in which every node has either 0 or 2 children.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Balanced tree&lt;&#x2F;p&gt;
&lt;p&gt;A binary tree where the left and right subtrees of every node differ
in height by no more than 1.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Degenerate &#x2F; Pathological tree&lt;&#x2F;p&gt;
&lt;p&gt;A tree where each parent node has only one associated child node.&lt;&#x2F;p&gt;
&lt;p&gt;This is essentially a linked list structure and provides no
additional benefits over it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;b-trees&quot;&gt;B-trees&lt;&#x2F;h2&gt;
&lt;p&gt;These function by optimizing the number of reads that need to be
performed in order to access data from a disk. These are often used in
databases.&lt;&#x2F;p&gt;
&lt;p&gt;In contrast to a binary tree which houses up to but not exceeding 2
child nodes per node, this structures the maximum number of children per
node in order to reach a full block size from the disk. In this way,
each read maximally saturates the disk read operation and requires fewer
reads from the disk in total to reach the desired data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;red-black-trees&quot;&gt;Red-black trees&lt;&#x2F;h2&gt;
&lt;p&gt;Red-black trees are a specialized type of binary tree which utilize a
set of rule to automatically balance itself during insertions and
deletions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;properties&quot;&gt;Properties&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Red&#x2F;Black property: Every node is colored. They can either be red or
black.&lt;&#x2F;li&gt;
&lt;li&gt;Root property: The root is black&lt;&#x2F;li&gt;
&lt;li&gt;Leaf property: Every leaf (nil) is black&lt;&#x2F;li&gt;
&lt;li&gt;Red property: If a red node has children, then the children are
always black.&lt;&#x2F;li&gt;
&lt;li&gt;Depth property: Every path from a given node to any of its leaf
(nil) nodes has the same number of black nodes.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;rotation-rules&quot;&gt;Rotation rules&lt;&#x2F;h3&gt;
&lt;h2 id=&quot;avl-trees&quot;&gt;AVL trees&lt;&#x2F;h2&gt;
&lt;p&gt;AVL trees are named after its inventors, Adelson-Velsky and Landis. It
is another specialized type of binary tree which is self-balancing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-info&quot;&gt;More info&lt;&#x2F;h3&gt;
&lt;h2 id=&quot;heaps&quot;&gt;Heaps&lt;&#x2F;h2&gt;
&lt;p&gt;A specialized tree data structure, which satisfies the &lt;strong&gt;heap
property&lt;&#x2F;strong&gt;. There are two types of heaps, min heap and max heap. In a
max heap, for any given node N, if P is a parent node of N, then the
value of P is greater than or equal to the value of N.&lt;&#x2F;p&gt;
&lt;p&gt;A heap is an implementation of another abstract data type; the priority
queue. Priority queues are sometimes referred to as heaps, regardless of
their implementation.&lt;&#x2F;p&gt;
&lt;p&gt;A common implementation is the &lt;strong&gt;binary heap&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;comparison-to-binary-search-trees&quot;&gt;Comparison to binary search trees&lt;&#x2F;h3&gt;
&lt;p&gt;Binary search trees follow a different kind of rule, such that the left
and right child nodes of any given node are less than or greater than
their parent, respectively. Meanwhile, a binary heap follows no such
ordering, and has no implicit ordering for searches.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;splay-trees&quot;&gt;Splay trees&lt;&#x2F;h2&gt;
&lt;p&gt;A binary search tree that provides the additional benefit that recently
accessed elements will be fast to access again. Operations similar
complete in O(log n) time similar to self-balancing binary search trees.
For operations that are performed in a non-random pattern, it can
complete in faster than logarithmic time, without requiring knowledge of
the pattern.&lt;&#x2F;p&gt;
&lt;p&gt;All operations are combined with one basic operation called splaying.
Splaying the tree rearranges the tree so that the element is placed at
the root of the tree. This requires tree rotations to move the element
to the top. This allows all of the operations performed to move recently
accessed elements closer to the root.&lt;&#x2F;p&gt;
&lt;p&gt;It is possible for the structure of the tree to be pathological based on
what element was most recently accessed, compared to a self-balancing
tree which maintains an logarithmic lookup time.&lt;&#x2F;p&gt;
&lt;p&gt;In short, a splay tree will reorganize based on most-recently used (MRU)
elements, while a self-balancing tree will reorganize to optimize for
random element searches.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;k-nearest-neighbor&quot;&gt;K-Nearest Neighbor&lt;&#x2F;h1&gt;
&lt;p&gt;Determining the most similar data point in a dataset based on determined
features.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;distance-calculation&quot;&gt;Distance calculation&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sqrt, ceil
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;calculate_distance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# we can only compare the datapoints if they are equal in cardinality
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(x) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(y)):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;ceil&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;([(x[i]-y[i]) ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(x))]))))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;map_distances&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;dataset&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;calculate_distance&lt;&#x2F;span&gt;&lt;span&gt;(value, datapoint) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;datapoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;dataset]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;k_nearest&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;dataset&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# todo: stuff
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bread&quot;&gt;Bread&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;### bread data
&lt;&#x2F;span&gt;&lt;span&gt;dataset = [
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;coordinate = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;map_distances&lt;&#x2F;span&gt;&lt;span&gt;(coordinate, dataset))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;netflix-user-data&quot;&gt;Netflix User Data&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;### netflix user data
&lt;&#x2F;span&gt;&lt;span&gt;dataset = [
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;calculate_distance&lt;&#x2F;span&gt;&lt;span&gt;(*dataset))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;fourier-transform&quot;&gt;Fourier Transform&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;mapreduce&quot;&gt;MapReduce&lt;&#x2F;h1&gt;
&lt;h1 id=&quot;scheduling-jobs&quot;&gt;Scheduling Jobs&lt;&#x2F;h1&gt;
&lt;p&gt;A common algorithmic problem is optimal scheduling in regards to time
slots. There are various approaches that can be taken here, such as
&amp;quot;shortest job first&amp;quot;, or &amp;quot;earliest starting job first&amp;quot;, which do not
always yield the correct result. In the case of scheduling, there is a
known, correct algorithm for this that is optimal:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;earliest-ending-job&quot;&gt;Earliest Ending Job&lt;&#x2F;h2&gt;
&lt;p&gt;This works by finding the job that ends the earliest, as opposed to the
job that starts the earliest. This job guarantees that less subsequent
jobs will be blocked than any others. The algorithm for this can be
defined as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;starts&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;ends&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span&gt;={}):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.starts = starts
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ends = ends
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.meta = meta
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;pop_earliest_ending_job&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Finding the earliest ending job&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    earliest_time = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;inf&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    earliest_job = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;job &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;jobs:
&lt;&#x2F;span&gt;&lt;span&gt;         logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Checking if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; ends earliest...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(job.meta[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]))
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(job.ends &amp;lt; earliest_time):
&lt;&#x2F;span&gt;&lt;span&gt;             logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Looks like it could be &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(job.meta[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]))
&lt;&#x2F;span&gt;&lt;span&gt;             earliest_job = job
&lt;&#x2F;span&gt;&lt;span&gt;             earliest_time = job.ends
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;The earliest ending job was &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(job.meta[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    jobs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(earliest_job)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;earliest_job
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;remove_overlapping_jobs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;end_time&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Removing jobs conflicting with end time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(end_time))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;job &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;[j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;jobs]:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Checking whether to remove &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(job.meta[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(job.starts &amp;lt; end_time):
&lt;&#x2F;span&gt;&lt;span&gt;            logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Removing the job&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            jobs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(job)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;optimal_scheduling&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Actual print statement&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Creating empty schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    optimal_jobs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(jobs) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        next_best_job = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pop_earliest_ending_job&lt;&#x2F;span&gt;&lt;span&gt;(jobs)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Next best job was &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(next_best_job.meta[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(next_best_job is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Adding to the optimal job schedule...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        optimal_jobs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(next_best_job)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Removing overlapping jobs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;remove_overlapping_jobs&lt;&#x2F;span&gt;&lt;span&gt;(jobs, next_best_job.ends)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; job(s)!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(optimal_jobs)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;optimal_jobs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Defined optimal scheduler&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;examples-1&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;p&gt;Take for example the following case of spending the day at the movie
theatre, and you want to watch as many movies as you can in a day. Here
are the showtimes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;set_debugging&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Creating set of showtimes...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;showtimes = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;([
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Job&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Mission Impossible&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Job&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Fellowship of the Ring&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Job&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Cars&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Job&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Dragon Ball Z&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;Job&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Lion King&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}),
&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Created a set...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Generating the best showtime schedule...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;optimal_showtime_schedule = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;optimal_scheduling&lt;&#x2F;span&gt;&lt;span&gt;(showtimes)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;I was able to schedule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; show(s)!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(optimal_showtime_schedule)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;shows_in_order = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(optimal_showtime_schedule, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: s.starts, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;show &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;shows_in_order:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;, starting at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt; and ending at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(show.meta[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;], show.starts, show.ends))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;All done&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>An Observability Starter</title>
        <published>2023-07-26T00:00:00+00:00</published>
        <updated>2023-07-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/observability-starter/"/>
        <id>https://blog.carrio.dev/blog/observability-starter/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/observability-starter/">&lt;p&gt;Observability refers to how well the state of a system can be understood by external outputs. When a system is more observable, you can more quickly identify root causes of performance issues, business logic bugs, and more. In the software engineering space, Application Performance Monitoring (APM) tools help in assisting in the overall observability of a software stack. The ecosystem as a whole began to evolve as distributed computing gained popularity, monoliths were broken up into microservices, and horizontal pod autoscalers were introduced to Kubernetes. New tools around tracking metrics in your applications and distributed tracing across service-to-service communication has surfaced over the years, with some larger players at the forefront of the open source space such as &lt;a href=&quot;https:&#x2F;&#x2F;opentelemetry.io&#x2F;&quot;&gt;OpenTelemetry&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;statsd&#x2F;statsd&quot;&gt;StatsD&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;openmetrics.io&#x2F;&quot;&gt;OpenMetrics&lt;&#x2F;a&gt;.
A big part of these technologies is also collecting, indexing, and presenting them to users. In this regard, there are tons of commercial private and open source solutions, including Prometheus, Datadog, Dynatrace, and more. These tools capture observability signals from across your servers, network traffic, application code, and more to provide you as much insight into your code as possible. Some have core features that give them an edge over the rest of the market, such as Dynatrace&#x27;s AI-powered root cause analysis engine or Datadog&#x27;s user-friendly dashboarding and extensible generated metrics tooling. Some open source options like Zipkin support OpenTelemetry and allow you to quickly aggregate traces but do not support other observability constructs like logs or metrics.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-logs&quot;&gt;What are Logs&lt;&#x2F;h2&gt;
&lt;p&gt;These are probably the most familiar of all of the observability constructs to any developer. From the most basic starter for any language, the Hello World, you are printing a string out to the console, thus generating a log. Logging in observability is a powerful too for understanding various decisions and state in a system. It can often be more expensive to track all logs compared to metrics and traces, particularly if context is injected into every log line. However, in combination with context, logs can serve as a vital tool in understanding which actions were taken within the context of a single trace. Most observability tools that support logs and traces will allow you to go from a log message with trace context to the specific trace in the system, as well as the opposite; allowing you to visualize all log messages related to a trace ID. Beyond this, they often boil down to just a string in the console, with perhaps some formal structure using JSON so you can provide not just a single message but additional context like error names and description, component names, and more.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-metrics&quot;&gt;What are Metrics&lt;&#x2F;h2&gt;
&lt;p&gt;Metrics are numeric aggregations about your application or infrastructure. They can tell you information about the number of requests to your web service over a time period or a statistical breakdown of median, minimum, and maximum of data sets for latency. These metrics can be used to measure all sorts of information about your systems, and are often a cost-effective way of doing so. You can use metrics around your application and requests to build the foundation of basic signals in your system, and all of the &lt;a href=&quot;https:&#x2F;&#x2F;sre.google&#x2F;sre-book&#x2F;monitoring-distributed-systems&#x2F;#xref_monitoring_golden-signals&quot;&gt;four golden signals of monitoring in the Google Site Reliability Engineering book&lt;&#x2F;a&gt; can utilize metrics to easily capture these. Between the statistical measurement of request &lt;em&gt;Latency&lt;&#x2F;em&gt;, the total &lt;em&gt;Traffic&lt;&#x2F;em&gt; to an application with request counts, the number of &lt;em&gt;Errors&lt;&#x2F;em&gt; that are occurring, and the &lt;em&gt;Saturation&lt;&#x2F;em&gt; of an application or database, metrics either directly provide and assist in deducing these signals about your system. They can often be quite simple to implement internally as well (see StatsD).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;statsd&quot;&gt;StatsD&lt;&#x2F;h3&gt;
&lt;p&gt;StatsD is an open source project originally released by Etsy, which is a NodeJS service and accompanying specification for simple and powerful metric collection. StatsD clients are typically lightweight, requiring only some configuration for a target host and&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-are-traces&quot;&gt;What are Traces&lt;&#x2F;h2&gt;
&lt;p&gt;Traces is a short-hand reference to distributed traces, which are graph data structures backed by some specification (OpenTelemetry, OpenTracing) that allow construct metadata about anything from database queries, HTTP requests, network calls and methods executing in your codebase. Any code execution, synchronous or asynchronous, can be visualized as a graph of spans. Spans are like the nodes of a graph, and by nature of the graph data structure there is no requirement to have a single parent node like in a tree. All spans have an implicit duration as a result of the span&#x27;s start time and end time. They also support naming of the resource and the operation being performed. These constructs collectively allow you to build a graph that effectively describes various types of network, software, and hardware actions being taken, information about them, and then construct visualizations of these that elegantly portray these distributed traces across systems or calculate metrics pertaining to various types of operations. Tracing is a powerful tool in the belt of any software engineer supporting their software in a production system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;opentelemetry&quot;&gt;OpenTelemetry&lt;&#x2F;h3&gt;
&lt;p&gt;This project defines standards around various observability constructs, including distributing tracing, metrics, and logging. In this way, OpenTelemetry provides a superset of functionality of various tools that preceded its release such as OpenCensus and OpenTracing. As a newer project, not all languages have stable releases, and certain features in the standard have progressed further than others. However, the project continues to gain traction as the open, vendor-agnostic solution for observability.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;opentracing&quot;&gt;OpenTracing&lt;&#x2F;h3&gt;
&lt;p&gt;This is an open specification which provides support for distributed tracing exclusively. It has since been superseded by OpenTelemetry, but is still supported and in use by certain vendors in the ecosystem.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-metadata-do-i-include&quot;&gt;What Metadata Do I Include&lt;&#x2F;h3&gt;
&lt;p&gt;There are some best practices defined, such as &lt;a href=&quot;https:&#x2F;&#x2F;opentelemetry.io&#x2F;docs&#x2F;concepts&#x2F;semantic-conventions&#x2F;&quot;&gt;OpenTelemetry&#x27;s Semantic Conventions&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;guide&#x2F;en&#x2F;ecs&#x2F;current&#x2F;index.html&quot;&gt;Elastic&#x27;s Common Schema&lt;&#x2F;a&gt;, which help to ensure consistent usage of span tags and other metadata on these spans based on their domain.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take for example a span generated for an HTTP client&#x27;s request:
&amp;gt; What HTTP method is the call?&lt;br &#x2F;&gt;
&amp;gt; What headers or how many?&lt;br &#x2F;&gt;
&amp;gt; What is the size of the payload?&lt;&#x2F;p&gt;
&lt;p&gt;These standards help you define the metadata that answers these questions on the span in a way that&#x27;s consistent across systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vendors&quot;&gt;Vendors&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️ More to come here&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;datadog&quot;&gt;Datadog&lt;&#x2F;h3&gt;
&lt;p&gt;Datadog&#x27;s dd-trace libraries are based on OpenTracing, and the clients in the package typically implement the OpenTracing client interface. OpenTracing itself is a deprecated project, but Datadog continues to base its tracing capabilities on this system. The backend for Datadog is proprietary, but their agents and dd-trace clients are all open source.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dynatrace&quot;&gt;Dynatrace&lt;&#x2F;h3&gt;
&lt;p&gt;Dynatrace is an APM company which centers around its AI-powered root cause analysis engine. It participated in the original inception of OpenTelemetry as a new direction for observability bringing its expertise on distributed tracing. Another core product feature is the OneAgent, which is an executable you can install on any server and it will automatically handle configuring trace and log instrumentation regardless of the system or software*.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
