<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - open source</title>
    <link rel="self" type="application/atom+xml" href="https://blog.carrio.dev/tags/open-source/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.carrio.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-09-19T00:00:00+00:00</updated>
    <id>https://blog.carrio.dev/tags/open-source/atom.xml</id>
    <entry xml:lang="en">
        <title>NixOS Secrets with Agenix and Systemd</title>
        <published>2023-09-19T00:00:00+00:00</published>
        <updated>2023-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/nixos-agenix-systemd-secrets/"/>
        <id>https://blog.carrio.dev/blog/nixos-agenix-systemd-secrets/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/nixos-agenix-systemd-secrets/">&lt;h2 id=&quot;prologue-what-is-nixos&quot;&gt;Prologue: What is NixOS?&lt;&#x2F;h2&gt;
&lt;p&gt;I will assume that you&#x27;re here to learn more about managing secrets on a NixOS system. If you want to learn more about NixOS itself, check out the &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;&quot;&gt;NixOS manual&lt;&#x2F;a&gt;. There is a lot to catch up on.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;‚ÑπÔ∏è I may add more updates to this blog post, but I want it available in case others run into the same issue I did for utilizing &lt;code&gt;agenix&lt;&#x2F;code&gt; in Systemd service units.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;üéôÔ∏èI do make use of voice to text tooling, but I try to correct as much as possible.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;managing-secrets-on-nixos&quot;&gt;Managing Secrets on NixOS&lt;&#x2F;h2&gt;
&lt;p&gt;NixOS being an entirely automated system has to conquer some of the same battles fought by other tools in the same space- Terraform for example automates the provisioning of resources and systems, and needs a way to maintain secrets on those. These should be kept as safe as possible, and as such has primitives around secrets. NixOS similarly has many tools that can be used, some reused across the industry like &lt;code&gt;age&lt;&#x2F;code&gt; and &lt;code&gt;sops&lt;&#x2F;code&gt;. They provide a full comparison of these tools and their integration with the NixOS system &lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Comparison_of_secret_managing_schemes&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;age-and-agenix&quot;&gt;Age and Agenix&lt;&#x2F;h2&gt;
&lt;p&gt;The tool &lt;a href=&quot;https:&#x2F;&#x2F;age-encryption.org&#x2F;&quot;&gt;age&lt;&#x2F;a&gt; is a modern encryption tool designed to be simple to work with, requires no configuration out-of-the-box, and is designed to be composable. This makes it a great tool to use with Nix. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryantm&#x2F;agenix&quot;&gt;agenix&lt;&#x2F;a&gt; project utilizes &lt;code&gt;age&lt;&#x2F;code&gt; in order to provide a pattern for managing secrets, and is separated into the CLI and the NixOS module. The CLI is used for interacting with secrets, and a &lt;code&gt;secrets.nix&lt;&#x2F;code&gt; file is provided in order to configure the target recipients for secret files, with these files existing in paths beneath the root directory of that &lt;code&gt;secrets.nix&lt;&#x2F;code&gt; file. Within your NixOS configuration, you can import the module, and then reference existing secrets and how they should be utilized in the system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-does-systemd-come-into-play&quot;&gt;Where Does Systemd Come Into Play?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, I was building off an existing blog post by Tailscale on how to configure a NixOS server for Minecraft on a Tailnet. I&#x27;m mostly concerned on automatically wiring up a Tailscale service securely on my NixOS servers, so I wanted to apply the same principle while utilizing one of the secrets managing tools.&lt;&#x2F;p&gt;
&lt;p&gt;So in this post, I&#x27;ll demonstrate this in the way I implemented the NixOS configuration to utilize &lt;code&gt;agenix&lt;&#x2F;code&gt; for automatic Tailscale connection with a secret token, managed in code securely with &lt;code&gt;age&lt;&#x2F;code&gt; encryption.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generating-secrets-with-agenix&quot;&gt;Generating secrets with agenix&lt;&#x2F;h2&gt;
&lt;p&gt;First step degenerating secrets with &lt;code&gt;agenix&lt;&#x2F;code&gt; is by setting up a &lt;code&gt;secrets.nix&lt;&#x2F;code&gt; file this file should define the public SSH keys of hosts or users who are able to decrypt the secrets.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a hint for those who are not familiar, but the system has its own SSH public and private keys in the &lt;code&gt;&#x2F;etc&lt;&#x2F;code&gt; directory. If these exist then &lt;code&gt;agenix&lt;&#x2F;code&gt; will utilize those to decrypt the mounted secrets.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;secrets-nix&quot;&gt;secrets.nix&lt;&#x2F;h3&gt;
&lt;p&gt;The output of the Nix expression is a map set. Each of these is a path, relative to the current directory of secrets.nix, and the public keys that the secret should be encrypted for. An example of the secrets.nix file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;keys &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;ssh-rsa foobarbaz... host@system&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;tailscale.age&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;publicKeys &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once this file is defined, &lt;code&gt;agenix&lt;&#x2F;code&gt; now understands within the context of the directory how to encrypt secrets with &lt;code&gt;age&lt;&#x2F;code&gt;. So, you can execute the &lt;code&gt;agenix&lt;&#x2F;code&gt; command in order to open a terminal editor, determined by the configured &lt;code&gt;VISUAL&lt;&#x2F;code&gt; environment variables, in which you can then insert the content and after saving the buffer will be encrypted to the desired file location.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;agenix -e tailscale.age
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;tailscale-nix&quot;&gt;tailscale.nix&lt;&#x2F;h3&gt;
&lt;p&gt;I have broken out the tailscale.nix file into its own expression that can be imported by an exos configuration. It encapsulates all of the necessary configurations, namely installing the tailscale package, enabling the tailscale service, enabling port forwarding for the tailscale service, configuring a one-off Systemd unit file which references the agents mounted secret file. By referencing the content of that file in line within the Systemd unit script, the encrypted token is now available in plain text for the tailscale auto-configuration.&lt;&#x2F;p&gt;
&lt;p&gt;The last important piece is that you must wait for the &lt;code&gt;run-agenix.d.mount&lt;&#x2F;code&gt; unit in this unit, otherwise there is the potential for a race condition where the &lt;code&gt;agenix&lt;&#x2F;code&gt; secret has not been decrypted to the secure location you are referencing, thus resulting in no content being passed for the token.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# tailscale.nix
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;config, pkgs, ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# the nix expression containing age secret configuration, enabling tailscale packages and service, networking rules, and the systemd autoconnect unit file
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# Here, we mount the token file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;tailscale-token &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;.&#x2F;tailscale.age&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;owner &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;group &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;mode &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;600&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# We&amp;#39;ll install the package to the system, enable the service, and set up some networking rules
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;systemPackages &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;; [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;tailscale &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;tailscale&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;enable &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;networking &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;firewall &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;checkReversePath &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;loose&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;allowedUDPPorts &lt;&#x2F;span&gt;&lt;span&gt;= [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;tailscale&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;trustedInterfaces &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;tailscale0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# Here is the magic, where we automatically connect with the tailscale CLI by passing our secret token, and ensure that agenix mounting was completed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;systemd&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;tailscale-autoconnect &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Automatic connection to Tailscale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# We must make sure that both the tailscale service and the agenix file mounting are running &#x2F; complete before trying to connect to tailscale
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;after &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;network-pre.target&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;tailscale.service&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;run-agenix.d.mount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;wants &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;network-pre.target&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;tailscale.service&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;run-agenix.d.mount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;wantedBy &lt;&#x2F;span&gt;&lt;span&gt;= [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;multi-user.target&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# Set this service as a oneshot job
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;serviceConfig&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;oneshot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# Run the following shell script for the job, passing the mounted secret for the tailscale connection
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;; &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            # wait for tailscaled to settle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            sleep 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            # check if we are already authenticated to tailscale
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            status=&amp;quot;$(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;tailscale&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&#x2F;bin&#x2F;tailscale status -json | &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;jq&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&#x2F;bin&#x2F;jq -r .BackendState)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            if [ $status = &amp;quot;Running&amp;quot; ]; then
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;                exit 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            # otherwise authenticate with tailscale
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;tailscale&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&#x2F;bin&#x2F;tailscale up -authkey &amp;quot;$(cat &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#87928a;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#87928a;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;secrets&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#87928a;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;tailscale-token&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#87928a;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&amp;quot;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;tl-dr&quot;&gt;tl;dr&lt;&#x2F;h2&gt;
&lt;p&gt;Agenix itself mounts files with Systemd in the &lt;code&gt;run-agenix.mount&lt;&#x2F;code&gt; unit. As such, you can utilize the mechanism of Systemd service definitions, namely &lt;code&gt;after&lt;&#x2F;code&gt; and &lt;code&gt;wants&lt;&#x2F;code&gt;, in order to ensure that the &lt;code&gt;agenix&lt;&#x2F;code&gt; secret mounts have been completed prior to starting your service. In this way, you can be sure that the secret is available.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to read more on NixOS configuration, you can check out my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tcarrio&#x2F;nix-config&quot;&gt;nix-config&lt;&#x2F;a&gt; repository which maintains several of my systems.&lt;&#x2F;p&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Nix Flakes Starter</title>
        <published>2023-08-11T00:00:00+00:00</published>
        <updated>2023-08-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/nix-flakes-starter/"/>
        <id>https://blog.carrio.dev/blog/nix-flakes-starter/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/nix-flakes-starter/">&lt;h2 id=&quot;what-is-nix&quot;&gt;What is Nix&lt;&#x2F;h2&gt;
&lt;p&gt;Nix consists of many things, and because of the common naming of &amp;quot;Nix&amp;quot; throughout it all, it can be confusing beyond just the surface level.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nix&lt;&#x2F;strong&gt;OS: An Operating System powered by Nix configurations and package manager&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nix&lt;&#x2F;strong&gt; language: A declarative, pure, functional, domain-specific language&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Nix&lt;&#x2F;strong&gt; package manager: A purely functional package manager&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As it pertains to this post on Nix Flakes, we&#x27;re mostly talking about the Nix &lt;em&gt;language&lt;&#x2F;em&gt;, which is used to implement a flake, and the Nix &lt;em&gt;package manager&lt;&#x2F;em&gt;, which can utilize and interact with flakes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nix-flakes&quot;&gt;Nix Flakes&lt;&#x2F;h2&gt;
&lt;p&gt;If you look up Nix flakes, the first article you&#x27;ll find it likely &lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Flakes&quot;&gt;the one on the NixOS Wiki&lt;&#x2F;a&gt;. This same article also clearly states at the top&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nix flakes&lt;&#x2F;strong&gt; are an &lt;em&gt;experimental feature&lt;&#x2F;em&gt; of the Nix package manager.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well that sounds dangerous, unstable, fragile, etc. etc. Yeah it does. But a lot of the Nix community believe that Nix flakes are &lt;strong&gt;The Future&lt;&#x2F;strong&gt;. And it&#x27;s been considered &amp;quot;experimental&amp;quot; for many years now, to be clear. But this post is less focused on the political discussion of flakes&#x27; stability and future and more on what it is, how to get started, and some example use cases.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-are-flakes&quot;&gt;What Are Flakes&lt;&#x2F;h3&gt;
&lt;p&gt;Flakes provide a kind of specification around how to define a Nix expression, how dependencies are managed between it and others, and provide general improvements to the Nix ecosystem such as reproducibility and composability. A flake consists of a file system tree which contains a &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file in its root directory. You would expect to see something like the following in a Nix flake:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;[0xc@sys ~]$ tree .&#x2F;devshells
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ flake.lock
&lt;&#x2F;span&gt;&lt;span&gt;‚îú‚îÄ‚îÄ flake.nix
&lt;&#x2F;span&gt;&lt;span&gt;‚îî‚îÄ‚îÄ README.md
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1 directory, 3 files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file offers a uniform &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;command-ref&#x2F;new-cli&#x2F;nix3-flake.html#flake-format&quot;&gt;schema&lt;&#x2F;a&gt; that allows other flakes to be referenced as dependencies, and the values produced by the Nix expression in the &lt;code&gt;flake.nix&lt;&#x2F;code&gt; file follow a specific structure to support certain use cases. Since a flake can reference others in a way that supports the lockfile mechanism, even composed Nix flakes support reproducibility.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;nix&lt;&#x2F;code&gt; CLI also supports flakes as an experimental feature.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-flake&quot;&gt;Creating a Flake&lt;&#x2F;h2&gt;
&lt;p&gt;With the &lt;code&gt;nix&lt;&#x2F;code&gt; CLI, you can run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;[0xc@sys ~]$ mkdir flake-test
&lt;&#x2F;span&gt;&lt;span&gt;[0xc@sys ~]$ cd flake-test
&lt;&#x2F;span&gt;&lt;span&gt;[0xc@sys ~]$ nix flake init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;crafting-a-flake-file&quot;&gt;Crafting a Flake File&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned, there is a uniform schema to Flake files. The following attributes are defined at the top-level in a Nix flake:&lt;&#x2F;p&gt;
&lt;p&gt;Flake schema&lt;&#x2F;p&gt;
&lt;p&gt;The flake.nix file is a Nix file but that has special restrictions (more on that later).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;description&lt;&#x2F;strong&gt;: a string describing the flake.
&lt;strong&gt;inputs&lt;&#x2F;strong&gt;: an attribute set of all the dependencies of the flake.
&lt;strong&gt;outputs&lt;&#x2F;strong&gt;: a function of one argument that takes an attribute set of all the realized inputs, and outputs another attribute set whose schema is described below.
&lt;strong&gt;nixConfig&lt;&#x2F;strong&gt;: an attribute set of values which reflect the values given to nix.conf. This can extend the normal behavior of a user&#x27;s nix experience by adding flake-specific configuration, such as a binary cache.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Flakes&quot;&gt;&lt;em&gt;Reference&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;description&lt;&#x2F;code&gt; is very straightforward, but let&#x27;s break down the remaining attributes, particularly &lt;code&gt;inputs&lt;&#x2F;code&gt; and &lt;code&gt;outputs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inputs&quot;&gt;Inputs&lt;&#x2F;h3&gt;
&lt;!-- TODO --&gt;
&lt;p&gt;The &lt;code&gt;inputs&lt;&#x2F;code&gt; schema allows the definition of zero or more flakes as references to the &lt;code&gt;outputs&lt;&#x2F;code&gt; schema. Any external requirements for the flake will be defined here, whether it&#x27;s a CLI tool, library, or service.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;inputs&lt;&#x2F;code&gt; allows you to define any number of flake inputs as local paths, Git repositories over SSH or HTTPS, and special shorthands for GitHub.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;inputs &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# specifying a GitHub repository by org&#x2F;repo and branch name (&amp;quot;master&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;github:NixOS&#x2F;nixpkgs&#x2F;master&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# specifying a Git repository by URL, using HTTPS or SSH protocol
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;https-example&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;git+https:&#x2F;&#x2F;git.example.test&#x2F;org&#x2F;repo?ref=branch&amp;amp;rev=deadbeef&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;ssh-example&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;git+ssh:&#x2F;&#x2F;git.example.test&#x2F;org&#x2F;repo?ref=branch&amp;amp;rev=deadbeef&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# specifying a shallow clone (won&amp;#39;t clone the `.git` directory)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;shallow-clone-example&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;git+file:&#x2F;local&#x2F;project&#x2F;path?shallow=1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# specifying a local directory
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;relative-path-dir-example&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;path:&#x2F;local&#x2F;project&#x2F;path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;absolute-path-dir-example&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&#x2F;local&#x2F;project&#x2F;path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# specifying a non-flake input
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;not-a-flake &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;github:0xc&#x2F;nonflake&#x2F;branch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;flake &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# specifying that the dependency&amp;#39;s `inputs.nixpkgs` should inherit from this flake
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;inherit&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;nixpkgs-example &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;another&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;follows &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    }&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These inputs and their controls give flakes substantially more power over deterministic build processes and consistency across the dependencies utilized within the inputs and the flake definitions&#x27; resources.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;outputs&quot;&gt;Outputs&lt;&#x2F;h3&gt;
&lt;p&gt;The magic of a flake. This is where we actually define the resources of a flake, and the schema provides us several mechanisms for things like development shells, applications, build targets, overlays, and more.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;applications&quot;&gt;Applications&lt;&#x2F;h4&gt;
&lt;p&gt;These are predefined run targets in your flake. These are suitable for packaging your application so you can execute it consistently.&lt;&#x2F;p&gt;
&lt;p&gt;Utilized with the &lt;code&gt;nix run&lt;&#x2F;code&gt; command. Within the outputs, you can specify these by doing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#b16139;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#867469;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&amp;lt;target-name&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;program &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;run-the-thing&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be executed using &lt;code&gt;nix run .#target-name&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to execute this with arguments you would run &lt;code&gt;nix run .#target-name -- ...&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;development-shells&quot;&gt;Development shells&lt;&#x2F;h4&gt;
&lt;p&gt;Dev shells are an extremely useful feature of flakes. There are some differences to the legacy Nix shell and the new &lt;code&gt;devShells&lt;&#x2F;code&gt; functionality of Nix flakes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;TODO: Add more info on these differences&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can define &lt;code&gt;devShells&lt;&#x2F;code&gt; in the &lt;code&gt;outputs&lt;&#x2F;code&gt;, and the most convenient way is using the &lt;code&gt;mkShell&lt;&#x2F;code&gt; function exposed in the &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; input argument. Suppose you have the nixpkgs repository input as &lt;code&gt;pkgs&lt;&#x2F;code&gt;, then you would be able to do&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;self, pkgs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;devShells &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;default &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mkShell &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;go &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mkShell &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The default target can be invoked with &lt;code&gt;nix develop .&lt;&#x2F;code&gt; and in this case will provide the &lt;code&gt;git&lt;&#x2F;code&gt; package, available in your PATH.&lt;&#x2F;p&gt;
&lt;p&gt;To invoke the &lt;code&gt;go&lt;&#x2F;code&gt; target, you would do &lt;code&gt;nix develop .#go&lt;&#x2F;code&gt;. Then we&#x27;d have the Go toolchain loaded and available so we could run or compile some Go code with &lt;code&gt;go build main.go&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;overlays&quot;&gt;Overlays&lt;&#x2F;h4&gt;
&lt;p&gt;Overlays are an interesting albeit somewhat advanced topic in Nix, but the goal of overlays is to support advanced flake customization capabilities, such as overriding packages within a flake. Overlays supercedes an old approach to this which was limited in scope to this one simple use case, called &lt;code&gt;packageOverride&lt;&#x2F;code&gt; and &lt;code&gt;overridePackages&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Overlays are defined as a nested function whose first argument is &lt;code&gt;final&lt;&#x2F;code&gt; and second argument is &lt;code&gt;prev&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;The following diagram visualizes the flow of the overlay function components throughout the system.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#171c19;color:#87928a;&quot;&gt;&lt;code&gt;&lt;span&gt;+---------------------+-----------------------+------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|                     |                       |                              |
&lt;&#x2F;span&gt;&lt;span&gt;|                     |                       |                              |
&lt;&#x2F;span&gt;&lt;span&gt;|  +-------------+    |  +-------------+      |  +--------------+            |
&lt;&#x2F;span&gt;&lt;span&gt;|  |             |    |  |             |      |  |              |            |
&lt;&#x2F;span&gt;&lt;span&gt;|  +-----+       |    |  +-----+       |      |  +-----+        |            |
&lt;&#x2F;span&gt;&lt;span&gt;+-&amp;gt;|final|       |    +-&amp;gt;|final|       |      +-&amp;gt;|final|        |            |
&lt;&#x2F;span&gt;&lt;span&gt;   +-----+       |       +-----+       |         +-----+        |            |
&lt;&#x2F;span&gt;&lt;span&gt;   |             |       |             |         |              |            |
&lt;&#x2F;span&gt;&lt;span&gt;   |    main     +---+   |             +--+      |              +------+     |
&lt;&#x2F;span&gt;&lt;span&gt;   |             |   |   |             |  |      |              |      |     |
&lt;&#x2F;span&gt;&lt;span&gt;   |             |   |   +-----+       |  |      +-----+        |      |     |
&lt;&#x2F;span&gt;&lt;span&gt;   |             |   +--&amp;gt;|prev |       |  |    +&amp;gt;|prev |        |      |     |
&lt;&#x2F;span&gt;&lt;span&gt;   |             |   |   +-----+       |  |    | +-----+        |      |     |
&lt;&#x2F;span&gt;&lt;span&gt;   |             |   |   |             |  |    | |              |      |     |
&lt;&#x2F;span&gt;&lt;span&gt;   +-------------+   |   +-------------+  |    | +--------------+      |     |
&lt;&#x2F;span&gt;&lt;span&gt;                     |                    |    |                       |     |
&lt;&#x2F;span&gt;&lt;span&gt;                     |                    |    |                       |     |
&lt;&#x2F;span&gt;&lt;span&gt;                     |                    |    |                       |     |
&lt;&#x2F;span&gt;&lt;span&gt;                     |                  +-v--+ |                     +-v--+  |
&lt;&#x2F;span&gt;&lt;span&gt;                     |                  |    | |                     |    |  |
&lt;&#x2F;span&gt;&lt;span&gt;                     +------------------&amp;gt; &#x2F;&#x2F; +-+---------------------&amp;gt; &#x2F;&#x2F; +--+
&lt;&#x2F;span&gt;&lt;span&gt;                                        +----+                       +----+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Within your flake, you can define overlays with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# Specifying an overlay by &amp;quot;name&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;overlays&lt;&#x2F;span&gt;&lt;span&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&amp;lt;name&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; final: prev: { }&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;# Specifying the default overlay
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;overlays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;default &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; final: prev: { }&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b16139;color:#ecf4ee;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These can be utilized in interesting ways, a good example is how the NodeJS runtimes and NPM dependencies like &lt;a href=&quot;https:&#x2F;&#x2F;yarnpkg.com&#x2F;&quot;&gt;Yarn&lt;&#x2F;a&gt; can be configured with overlays to ensure the correct underlying runtime is used for the package.&lt;&#x2F;p&gt;
&lt;p&gt;My &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tcarrio&#x2F;devshells&quot;&gt;devshells&lt;&#x2F;a&gt; repository showcases this. A &lt;em&gt;paraphrased&lt;&#x2F;em&gt; version of the code would be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;node16Overlay &lt;&#x2F;span&gt;&lt;span&gt;= self: super: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;nodejs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;nodejs-16_x&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;yarn16Overlay &lt;&#x2F;span&gt;&lt;span&gt;= self: super: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;yarn &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;override &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;nodejs &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;nodejs-16_x&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;pkgsNode16 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;nixpkgs &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;inherit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;overlays &lt;&#x2F;span&gt;&lt;span&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;node16Overlay yarn16Overlay&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;in rec &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;devShells &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;default &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;mkShell &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;pkgsNode16&lt;&#x2F;span&gt;&lt;span&gt;; [
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;nodejs-16_x
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;yarn
&lt;&#x2F;span&gt;&lt;span&gt;            ];
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;and-more&quot;&gt;And more&lt;&#x2F;h4&gt;
&lt;p&gt;There are &lt;em&gt;even more&lt;&#x2F;em&gt; use cases for Nix flake outputs, that I won&#x27;t dive into much here. The resources mentioned throughout this article are extremely useful though, and there is tremendous depth to Nix that you can dive into.&lt;&#x2F;p&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OpenFeature Introduction</title>
        <published>2023-08-07T00:00:00+00:00</published>
        <updated>2023-08-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/openfeature-introduction/"/>
        <id>https://blog.carrio.dev/blog/openfeature-introduction/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/openfeature-introduction/">&lt;h2 id=&quot;what-are-feature-flags&quot;&gt;What Are Feature Flags&lt;&#x2F;h2&gt;
&lt;p&gt;Feature flags are a way to dynamically control the capabilities of software, often with granularity to specific users, regions, and more. Flagging empowers companies to experiment with new features, and companies like Spotify, Duolingo, and Google use these heavily to prove out their hypotheses around generating better user experiences and products. It can be as simple as flipping the title of a landing page to an entire suite of features in the product- the possibilities are almost endless.&lt;&#x2F;p&gt;
&lt;p&gt;This is often times pretty simple, and in the code could be done with a basic &lt;code&gt;if&#x2F;else&lt;&#x2F;code&gt; block:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tsx&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-tsx &quot;&gt;&lt;code class=&quot;language-tsx&quot; data-lang=&quot;tsx&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;flagService&lt;&#x2F;span&gt;&lt;span&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;useContext&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;FeatureFlagging&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;flagService&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;isOn&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;new-experience&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;NewComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Component &lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;props&lt;&#x2F;span&gt;&lt;span style=&quot;color:#867469;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And there you have it. You now have a dynamically response interface based on logic determined by your feature flagging service. None of the above code related to any existing tool in particular, but what this post will do is get you acquainted with a new open source project called OpenFeature which you can get started with today.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-openfeature&quot;&gt;What is OpenFeature&lt;&#x2F;h2&gt;
&lt;p&gt;OpenFeature is a project that defines an &lt;strong&gt;open specification&lt;&#x2F;strong&gt; for feature flagging SDK behaviors to support consistent developer experiences backed by any feature flagging vendor in the ecosystem. The project provides an open source, vendor-agnostic SDK for many languages, which vendors can support with &lt;strong&gt;providers&lt;&#x2F;strong&gt; to back the flagging logic and &lt;strong&gt;hooks&lt;&#x2F;strong&gt; to enhance with various capabilities in the feature flagging lifecycle. The SDK is an implementation upon the OpenFeature specification, and can be configured against any one of the available providers for that language. If you&#x27;re interested, take a look on their &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;ecosystem&quot;&gt;ecosystem&lt;&#x2F;a&gt; page, which lets you search across different types like server-side and client-side, technologies like Go, JavaScript, and PHP, Vendors like Split and CloudBees, and more.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;providers&quot;&gt;Providers&lt;&#x2F;h3&gt;
&lt;p&gt;OpenFeature itself is a specification with vendor-agnostic open source packages for various languages. The vendors provide the feature flag evaluation component of the architecture though- and you&#x27;ll need one. These can be backed by open source projects, companies&#x27; SDKs like LaunchDarkly and Split, or an in-house flagging system. You can develop your application against the OpenFeature interfaces and swap out providers across environments- easily allowing your local dev system utilize environment variable configurations where production is backed by an enterprise solution. Find out more on providers &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;specification&#x2F;sections&#x2F;hooks&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hooks&quot;&gt;Hooks&lt;&#x2F;h3&gt;
&lt;p&gt;The flag evaluation lifecyle is well documented in OpenFeature, and supports &lt;em&gt;hooks&lt;&#x2F;em&gt;, which can enhance or augment a flag evaluation. Perhaps you want to inject a logger in staging or provide tracing capabilities with OpenTelemetry. All of this is easily doable by utilizing a hooks package or writing your own hook against the interface. You can read more on the hooks lifecycle &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;specification&#x2F;sections&#x2F;hooks&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;This will depend on your language of choice, so I&#x27;ll provide a couple of examples. The first will be JavaScript, with a focus on client-side use cases. The next will be a server-side reference with PHP. You can find more samples in the &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;docs&#x2F;reference&#x2F;technologies&#x2F;&quot;&gt;technologies&lt;&#x2F;a&gt; page as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;client-side-javascript&quot;&gt;Client-side JavaScript&lt;&#x2F;h3&gt;
&lt;p&gt;These utilize a pattern in OpenFeature called &lt;em&gt;static context&lt;&#x2F;em&gt;. What this amounts to is that there is just the current user, the one interacting with the web client, so there doesn&#x27;t need to be as highly dynamic of a flag evaluation system backing the OpenFeature client.&lt;&#x2F;p&gt;
&lt;p&gt;Start off by installing the package to your project. Here I&#x27;ll use &lt;code&gt;yarn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add @openfeature&#x2F;js-sdk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can start working with the SDK by coding the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@openfeature&#x2F;js-sdk&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getBooleanValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;new-experience&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is very similar to the above example, but needs the magic sauce to actually &lt;em&gt;provide&lt;&#x2F;em&gt; the logic- an OpenFeature &lt;strong&gt;provider&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wire-up-a-provider&quot;&gt;Wire Up A Provider&lt;&#x2F;h4&gt;
&lt;p&gt;You need a provider to back the flag evaluation in the OpenFeature SDK. These are pluggable, and anything that adheres to the defined Provider interface can fulfill this contract. I&#x27;ll pull in a specific provider, just as an example. In my case I&#x27;ll use the [Split] provider. The Split provider has a peer dependency on the Split SDK as well, so I will install them both with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;yarn&lt;&#x2F;span&gt;&lt;span&gt; add @splitsoftware&#x2F;openfeature-js-split-provider @splitsoftware&#x2F;splitio
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have a provider, we can update our code example above accordingly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@openfeature&#x2F;js-sdk&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;SplitFactory &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@splitsoftware&#x2F;splitio&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeatureSplitProvider &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;@splitsoftware&#x2F;openfeature-js-split-provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; The key that authorizes the Split client to connect to the Split API
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;SPLIT_AUTHORIZATION_KEY &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;your-split-auth-key&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;splitClient &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;SplitFactory&lt;&#x2F;span&gt;&lt;span&gt;({core: {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;authorizationKey&lt;&#x2F;span&gt;&lt;span&gt;}}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider &lt;&#x2F;span&gt;&lt;span&gt;= new OpenFeatureSplitProvider({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;splitClient&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;OpenFeature&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;setProvider&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; With the provider set, let&amp;#39;s get to work
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;getBooleanValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;new-experience&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;isNewExperience&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;server-side-php&quot;&gt;Server-side PHP&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned, several languages are supported, including .NET, Go, and more. In this example we&#x27;ll utilize the PHP SDK since I wrote it.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s assume you&#x27;re using &lt;code&gt;composer&lt;&#x2F;code&gt; like every other PHP project- then you would install the SDK by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;composer&lt;&#x2F;span&gt;&lt;span&gt; require open-feature&#x2F;sdk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will pull in the package and update your &lt;code&gt;composer.json&lt;&#x2F;code&gt; and &lt;code&gt;composer.lock&lt;&#x2F;code&gt; accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;Now, to utilize the SDK, you will simply retrieve an instance from the SDK:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#867469;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Api\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Controller&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Api\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;Api\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;Route&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureClient&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;#[Route(&amp;quot;&#x2F;cats&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;CatsController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;private readonly OpenFeatureClient &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  ) {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;#[Method\Get]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#478c90;&quot;&gt;actionFavorite&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;UI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userId &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getUserIdFromRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;favoriteCat &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getStringValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;favorite-cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Nebelung&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;, [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;user-id&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;userId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    ]);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;favoriteCat&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; =&amp;gt; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;favoriteCat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;    ];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ecf4ee;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when the OpenFeature client evaluates the flag for the request, it&#x27;ll pass some evaluation context as well, which includes the user&#x27;s ID if it exists. The provider will utilize this to determine what the correct value to return will be, which allows us to provide consistent experiences at the user-level. As long as the same user is accessing the API, they will receive the same behavior.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This example removed the steps of instantiating a provider and instead utilized inversion of control to allow the framework to provide the necessary OpenFeature client instead. The process is similar to that shown in the JS SDK.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;hooks-manual-instrumentation&quot;&gt;Hooks Manual Instrumentation&lt;&#x2F;h3&gt;
&lt;p&gt;Just like you can set a provider in your OpenFeature SDK, you can also add hooks. The hooks are executed in a particular ordered defined by the specification, such that you can expect the behavior in the JavaScript SDK to be identical to that of the PHP SDK, Go SDK, etc.&lt;&#x2F;p&gt;
&lt;p&gt;When adding hooks, you can do so at any level of the OpenFeature SDK: API, Client, Provider, and invocation. How these are each evaluated is defined in the &lt;a href=&quot;https:&#x2F;&#x2F;openfeature.dev&#x2F;specification&#x2F;sections&#x2F;hooks#requirement-441&quot;&gt;hook ordering&lt;&#x2F;a&gt; specification.&lt;&#x2F;p&gt;
&lt;p&gt;Here we will add the &lt;a href=&quot;https:&#x2F;&#x2F;packagist.org&#x2F;packages&#x2F;open-feature&#x2F;validators-hook&quot;&gt;validators&lt;&#x2F;a&gt; hook for PHP, available in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;open-feature&#x2F;php-sdk-contrib&quot;&gt;php-sdk-contrib&lt;&#x2F;a&gt; repository:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;composer&lt;&#x2F;span&gt;&lt;span&gt; require open-feature&#x2F;validators-hook
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can utilize the hook at each of the mentioned levels by doing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#867469;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\Hooks\Validators\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;RegexpValidatorHook&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Custom hook
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;RegexpValidatorHook&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;[0-9a-f]&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; API
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;api &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;addHooks&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Client
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;api&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;hooks-test&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;addHooks&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Provider
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;ExampleProvider&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;provider&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;addHooks&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Invocation
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;resolveStringValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;test-flag&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;deadbeef&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;EvaluationOptions&lt;&#x2F;span&gt;&lt;span&gt;([$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;hexadecimalValidator&lt;&#x2F;span&gt;&lt;span&gt;]));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Easy as that! The higher up you place the hook, the more &lt;em&gt;universal&lt;&#x2F;em&gt; it becomes across your application. Make sure to keep this in mind as applying something at the API-level will impact &lt;em&gt;every evaluation&lt;&#x2F;em&gt; in the entire application.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hooks-observability-with-opentelemetry&quot;&gt;Hooks: Observability with OpenTelemetry&lt;&#x2F;h3&gt;
&lt;p&gt;Something that you might find useful as a developer pushing code to production is how the behavior of the feature flagging system may impact your users. Perhaps you want to know whether the evaluation in the provider, or what value was determined for a given request. Well, you can utilize observability tools like OpenTelemetry to accomplish that.&lt;&#x2F;p&gt;
&lt;p&gt;There are a couple of observability hooks already provided, and both of them utilize the PSR-4 autoloader functionality for PHP. The convenience of this is that all it takes is having the package &lt;em&gt;installed&lt;&#x2F;em&gt; and you&#x27;ll get the hook set at the API-level to trace &lt;em&gt;all&lt;&#x2F;em&gt; evaluations, following the standard practices defined in e.g. OpenTelemetry&#x27;s Semantic Conventions.&lt;&#x2F;p&gt;
&lt;p&gt;So, install the package:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;composer&lt;&#x2F;span&gt;&lt;span&gt; require open-feature&#x2F;otel-hook
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And autoload as you normally would! This example follows the standard practice of autoloading at the entrypoint of your PHP application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#867469;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;declare&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;strict_types&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;OpenFeature\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_PHP_AUTOLOAD_ENABLED=true&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_TRACES_EXPORTER=otlp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_EXPORTER_OTLP_PROTOCOL=grpc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_METRICS_EXPORTER=otlp&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=grpc&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_EXPORTER_OTLP_ENDPOINT=http:&#x2F;&#x2F;collector:4317&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_PHP_TRACES_PROCESSOR=batch&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;putenv&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;OTEL_PROPAGATORS=b3,baggage,tracecontext&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;autoloading SDK example starting...&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; . PHP_EOL;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5f6d64;&quot;&gt;&#x2F;&#x2F; Composer autoloader will execute SDK&#x2F;_autoload.php which will register global instrumentation from environment configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#55859b;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#9f713c;&quot;&gt;__DIR__&lt;&#x2F;span&gt;&lt;span&gt;) . &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;&#x2F;vendor&#x2F;autoload.php&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a07e3b;&quot;&gt;OpenFeatureAPI&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span&gt;()-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getClient&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;dev.openfeature.contrib.php.demo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;1.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;getStringValue&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;dev.openfeature.contrib.php.version-value&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1c9aa0;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#489963;&quot;&gt;Version is &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; . $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b16139;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there were no &lt;strong&gt;explicit actions&lt;&#x2F;strong&gt; necessary. However, the OpenTelemetry hook is set up at the API-level and providing tracing based on the configuration of your OTel exporter.&lt;&#x2F;p&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Contributing to Open Source: A Stab at Go</title>
        <published>2023-07-28T00:00:00+00:00</published>
        <updated>2023-07-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.carrio.dev/blog/open-source-a-go-story/"/>
        <id>https://blog.carrio.dev/blog/open-source-a-go-story/</id>
        
        <content type="html" xml:base="https://blog.carrio.dev/blog/open-source-a-go-story/">&lt;p&gt;In 2018, I had been diving further into Go, a relatively new language at the time from Google. I was interested in taking it a step further and contributing to a well known and professional open source project based in Go from a reputable team that could provide me reviews and advice. As a system admin and software engineer, I was already familiar with the tool &lt;a href=&quot;https:&#x2F;&#x2F;www.packer.io&#x2F;&quot;&gt;Packer&lt;&#x2F;a&gt; from HashiCorp and had used it personally on several occasions. Based on this, I decided to start there.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-work&quot;&gt;Finding work&lt;&#x2F;h2&gt;
&lt;p&gt;With open source code, and especially in a well maintained project, it is very straightforward to find feature requests and bugs that need help. So, I dug through their &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;packer&#x2F;issues&quot;&gt;Issue List on GitHub&lt;&#x2F;a&gt;. I found a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;packer&#x2F;issues&#x2F;6464&quot;&gt;feature request&lt;&#x2F;a&gt; I thought was interesting regarding the &lt;a href=&quot;https:&#x2F;&#x2F;www.openstack.org&#x2F;&quot;&gt;OpenStack&lt;&#x2F;a&gt; integration for Packer.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add support to select most recent source image when name is provided&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This was something that felt very approachable to me, for the following reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;An enhancement of existing code&lt;&#x2F;li&gt;
&lt;li&gt;A feature that has been implemented for an existing integration&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I wasn&#x27;t at the point of making large architectural decisions around these things with Go, so these provided me certain handrails to getting an initial change request proposal together.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;&#x2F;h2&gt;
&lt;p&gt;I discussed with other members of the community on the issue to determine further requirements and design strategy. After digging through the existing code for OpenStack, I discovered multiple components around this integration. I&#x27;ll go through each of the parts I had deemed necessary to research to scope out the required changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;researching-the-openstack-api&quot;&gt;Researching the OpenStack API&lt;&#x2F;h3&gt;
&lt;p&gt;The OpenStack API was going to be the primary gateway to implementing this functionality- supposing they did not offer the adequate functionality to implement this it would be a non-starter. As such, I started there, in the &lt;a href=&quot;https:&#x2F;&#x2F;developer.openstack.org&#x2F;api-ref&quot;&gt;OpenStack API documentation&lt;&#x2F;a&gt;.
The component responsible for serving images in OpenStack is [glance], an image service where users can upload and also discover assets. The image services support discovering, registering, and retrieving virtual machine images and exposes a REST API for both querying metadata and retrieving images. The &lt;a href=&quot;https:&#x2F;&#x2F;developer.openstack.org&#x2F;api-ref&#x2F;image&#x2F;v2&#x2F;&quot;&gt;OpenStack image v2 documentation&lt;&#x2F;a&gt; covered the available endpoints, including a &lt;a href=&quot;https:&#x2F;&#x2F;docs.openstack.org&#x2F;api-ref&#x2F;image&#x2F;v2&#x2F;?expanded=list-images-detail#list-images&quot;&gt;List Images API&lt;&#x2F;a&gt;.
The image API allows for additional query parameters to be passed in to filter and sort results. The important query parameters I identified include &lt;code&gt;limit&lt;&#x2F;code&gt;, &lt;code&gt;sort_key&lt;&#x2F;code&gt;, and &lt;code&gt;sort_dir&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With the following query, it would be possible to search by an image name and return at most one result, which would be the most recent image created with that name:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;url&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-url &quot;&gt;&lt;code class=&quot;language-url&quot; data-lang=&quot;url&quot;&gt;&lt;span&gt;?sort_key=created_at&amp;amp;sort_dir=desc&amp;amp;limit=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;scoping-out-packer-changes&quot;&gt;Scoping out Packer changes&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;api-calls&quot;&gt;API calls&lt;&#x2F;h4&gt;
&lt;p&gt;OpenStack support was already built in to Packer, so this was already a solved problem. In terms of scoping out what changes would be necessary here, I primarily wanted to determine whether there was an internal implementation to Packer for calling and handling responses from the OpenStack API or if they were utilizing some library for accomplishing this. I found the &lt;a href=&quot;http:&#x2F;&#x2F;gophercloud.io&#x2F;&quot;&gt;gophercloud&lt;&#x2F;a&gt; package was being used in Packer already, so how I would interact with the API would be through that library. It also meant that if there was not support for the V2 API, I would likely be contributing a change to gophercloud in order to pull that update into Packer to support the OpenStack changes.&lt;&#x2F;p&gt;
&lt;p&gt;My initial review of the gophercloud code led me to believe that the image v2 API was not supported, so I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gophercloud&#x2F;gophercloud&#x2F;issues&#x2F;1111&quot;&gt;opened an issue on their project&lt;&#x2F;a&gt;. In actuality it had implemented both the older compute API that allowed for listing images as well as the new glance service&#x27;s API, and &lt;code&gt;@jtopjian&lt;&#x2F;code&gt; was very helpful in pointing me to the correct code in the library for API v2. This library has a &lt;code&gt;ListOpts&lt;&#x2F;code&gt; struct which is passed to marshal the query string dynamically.&lt;&#x2F;p&gt;
&lt;p&gt;Within the Packer issue, I was also getting good feedback around the gophercloud library and its capabilities for the image V2 API. With all of that squared away, I was assured in utilizing the existing library for this new feature.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;packer-configuration&quot;&gt;Packer configuration&lt;&#x2F;h4&gt;
&lt;p&gt;Another required change to support this functionality would be in the configuration file schema and its handling in the Packer executable. The configuration file would need to provide support for a &lt;code&gt;source_image_filter&lt;&#x2F;code&gt; attribute that would allow dynamically generating the query, similar to the &lt;code&gt;source_ami_filter&lt;&#x2F;code&gt; implementation for AWS. The configuration file could be advanced and allow for a full &lt;code&gt;ListOpts&lt;&#x2F;code&gt; structure to be passed in or simplified with a &lt;code&gt;most_recent_image&lt;&#x2F;code&gt; boolean flag. I continued to vocalize my design ideas in the Packer issue, and while waiting on feedback I started off on the solution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;The start of my work was on the configuration file updates. This would then be passed into the new functionality. After updating the structure, I began work on the &lt;code&gt;image_query.go&lt;&#x2F;code&gt; file. This was my first time working with the Reflection API in Go, and most languages provide some mechanism around this and it all falls under the umbrella of metaprogramming. My first pass in the PR was pretty rudimentary, and not having an OpenStack environment limited my ability to run a live test of my changes. All I had to go on were docs.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h4&gt;
&lt;p&gt;Never forget to test your code. There are very few open source projects I have seen that do not have automated testing and test coverage &lt;em&gt;especially&lt;&#x2F;em&gt; those run by corporations. The software needs to work, and stay working. Refactoring should feel safe, and if a breaking change is included it should be detected without anyone manually running your code. With the advent of DevOps and automation came a bright new age for software engineering- and continuous integration in your project ensures that you detect code smells and bugs faster than ever.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;iteration&quot;&gt;Iteration&lt;&#x2F;h3&gt;
&lt;p&gt;I prefaced this post with an important note: I was not a Go expert. In fact, I&#x27;m still not- it&#x27;s a tool I&#x27;ve used in a few scenarios over the past 5 years but it&#x27;s never been my primary language in open source or professional work. So, unsurprisingly, I had feedback on my changes. This is a very good thing, because getting feedback on our work is one of the greatest ways we learn. We receive insight into design patterns, functionality we didn&#x27;t know existed, or new topics we hadn&#x27;t dove into before. We don&#x27;t know what we don&#x27;t know, and someone being there to tell you what those things are is absolutely invaluable.&lt;&#x2F;p&gt;
&lt;p&gt;I went through several iterations of the work over the next &lt;strong&gt;month&lt;&#x2F;strong&gt;. &lt;code&gt;@rickard-von-essen&lt;&#x2F;code&gt; was immensely helpful during this code review, and I received a lot of support from other team members at Packer throughout the entire process too. It was an absolute joy to work on, and I was very happy with the result. The code hooked into the &lt;code&gt;packer validate&lt;&#x2F;code&gt; functionality, worked smoothly with the Image V2 API, applied defensive tactics on inputs, was well tested, and provided clear documentation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-final-work&quot;&gt;The final work&lt;&#x2F;h3&gt;
&lt;p&gt;For reference, the full PR changes can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hashicorp&#x2F;packer&#x2F;pull&#x2F;6490&#x2F;files&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff go&quot; style=&quot;background-color:#171c19;color:#87928a;&quot; class=&quot;language-diff go &quot;&gt;&lt;code class=&quot;language-diff go&quot; data-lang=&quot;diff go&quot;&gt;&lt;span&gt;commit 70cfafb75c09d5ea54dccffb699b3e487ea7320a
&lt;&#x2F;span&gt;&lt;span&gt;Merge: bb319fb1e e2fe5cd77
&lt;&#x2F;span&gt;&lt;span&gt;Author: Rickard von Essen &amp;lt;rickard.von.essen@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Date:   Thu Aug 23 12:41:06 2018 +0200
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Merge pull request #6490 from tcarrio&#x2F;most-recent-image-openstack
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    OpenStack source image search filter
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;builder&#x2F;openstack&#x2F;builder.go b&#x2F;builder&#x2F;openstack&#x2F;builder.go
&lt;&#x2F;span&gt;&lt;span&gt;index 2938d67c0..638dcc8ba 100644
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;builder&#x2F;openstack&#x2F;builder.go
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;builder&#x2F;openstack&#x2F;builder.go
&lt;&#x2F;span&gt;&lt;span&gt;@@ -86,6 +86,12 @@ func (b *Builder) Run(ui packer.Ui, hook packer.Hook, cache packer.Cache) (packe
&lt;&#x2F;span&gt;&lt;span&gt; 			PrivateKeyFile:       b.config.RunConfig.Comm.SSHPrivateKey,
&lt;&#x2F;span&gt;&lt;span&gt; 			SSHAgentAuth:         b.config.RunConfig.Comm.SSHAgentAuth,
&lt;&#x2F;span&gt;&lt;span&gt; 		},
&lt;&#x2F;span&gt;&lt;span&gt;+		&amp;amp;StepSourceImageInfo{
&lt;&#x2F;span&gt;&lt;span&gt;+			SourceImage:      b.config.RunConfig.SourceImage,
&lt;&#x2F;span&gt;&lt;span&gt;+			SourceImageName:  b.config.RunConfig.SourceImageName,
&lt;&#x2F;span&gt;&lt;span&gt;+			SourceImageOpts:  b.config.RunConfig.sourceImageOpts,
&lt;&#x2F;span&gt;&lt;span&gt;+			SourceMostRecent: b.config.SourceImageFilters.MostRecent,
&lt;&#x2F;span&gt;&lt;span&gt;+		},
&lt;&#x2F;span&gt;&lt;span&gt; 		&amp;amp;StepCreateVolume{
&lt;&#x2F;span&gt;&lt;span&gt; 			UseBlockStorageVolume:  b.config.UseBlockStorageVolume,
&lt;&#x2F;span&gt;&lt;span&gt; 			SourceImage:            b.config.SourceImage,
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;builder&#x2F;openstack&#x2F;run_config.go b&#x2F;builder&#x2F;openstack&#x2F;run_config.go
&lt;&#x2F;span&gt;&lt;span&gt;index b98b65ea8..ccc87dffc 100644
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;builder&#x2F;openstack&#x2F;run_config.go
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;builder&#x2F;openstack&#x2F;run_config.go
&lt;&#x2F;span&gt;&lt;span&gt;@@ -4,6 +4,7 @@ import (
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;errors&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;github.com&#x2F;gophercloud&#x2F;gophercloud&#x2F;openstack&#x2F;imageservice&#x2F;v2&#x2F;images&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;github.com&#x2F;hashicorp&#x2F;packer&#x2F;common&#x2F;uuid&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;github.com&#x2F;hashicorp&#x2F;packer&#x2F;helper&#x2F;communicator&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;github.com&#x2F;hashicorp&#x2F;packer&#x2F;template&#x2F;interpolate&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;@@ -18,21 +19,22 @@ type RunConfig struct {
&lt;&#x2F;span&gt;&lt;span&gt; 	SSHInterface         string              `mapstructure:&amp;quot;ssh_interface&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt; 	SSHIPVersion         string              `mapstructure:&amp;quot;ssh_ip_version&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;-	SourceImage       string            `mapstructure:&amp;quot;source_image&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	SourceImageName   string            `mapstructure:&amp;quot;source_image_name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	Flavor            string            `mapstructure:&amp;quot;flavor&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	AvailabilityZone  string            `mapstructure:&amp;quot;availability_zone&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	RackconnectWait   bool              `mapstructure:&amp;quot;rackconnect_wait&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	FloatingIPNetwork string            `mapstructure:&amp;quot;floating_ip_network&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	FloatingIP        string            `mapstructure:&amp;quot;floating_ip&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	ReuseIPs          bool              `mapstructure:&amp;quot;reuse_ips&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	SecurityGroups    []string          `mapstructure:&amp;quot;security_groups&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	Networks          []string          `mapstructure:&amp;quot;networks&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	Ports             []string          `mapstructure:&amp;quot;ports&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	UserData          string            `mapstructure:&amp;quot;user_data&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	UserDataFile      string            `mapstructure:&amp;quot;user_data_file&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	InstanceName      string            `mapstructure:&amp;quot;instance_name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;-	InstanceMetadata  map[string]string `mapstructure:&amp;quot;instance_metadata&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	SourceImage        string            `mapstructure:&amp;quot;source_image&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	SourceImageName    string            `mapstructure:&amp;quot;source_image_name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	SourceImageFilters ImageFilter       `mapstructure:&amp;quot;source_image_filter&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	Flavor             string            `mapstructure:&amp;quot;flavor&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	AvailabilityZone   string            `mapstructure:&amp;quot;availability_zone&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	RackconnectWait    bool              `mapstructure:&amp;quot;rackconnect_wait&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	FloatingIPNetwork  string            `mapstructure:&amp;quot;floating_ip_network&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	FloatingIP         string            `mapstructure:&amp;quot;floating_ip&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	ReuseIPs           bool              `mapstructure:&amp;quot;reuse_ips&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	SecurityGroups     []string          `mapstructure:&amp;quot;security_groups&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	Networks           []string          `mapstructure:&amp;quot;networks&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	Ports              []string          `mapstructure:&amp;quot;ports&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	UserData           string            `mapstructure:&amp;quot;user_data&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	UserDataFile       string            `mapstructure:&amp;quot;user_data_file&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	InstanceName       string            `mapstructure:&amp;quot;instance_name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	InstanceMetadata   map[string]string `mapstructure:&amp;quot;instance_metadata&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	ConfigDrive bool `mapstructure:&amp;quot;config_drive&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;@@ -47,6 +49,52 @@ type RunConfig struct {
&lt;&#x2F;span&gt;&lt;span&gt; 	&#x2F;&#x2F; Not really used, but here for BC
&lt;&#x2F;span&gt;&lt;span&gt; 	OpenstackProvider string `mapstructure:&amp;quot;openstack_provider&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt; 	UseFloatingIp     bool   `mapstructure:&amp;quot;use_floating_ip&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	sourceImageOpts images.ListOpts
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+type ImageFilter struct {
&lt;&#x2F;span&gt;&lt;span&gt;+	Filters    ImageFilterOptions `mapstructure:&amp;quot;filters&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	MostRecent bool               `mapstructure:&amp;quot;most_recent&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+type ImageFilterOptions struct {
&lt;&#x2F;span&gt;&lt;span&gt;+	Name       string   `mapstructure:&amp;quot;name&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	Owner      string   `mapstructure:&amp;quot;owner&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	Tags       []string `mapstructure:&amp;quot;tags&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+	Visibility string   `mapstructure:&amp;quot;visibility&amp;quot;`
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+func (f *ImageFilterOptions) Empty() bool {
&lt;&#x2F;span&gt;&lt;span&gt;+	return f.Name == &amp;quot;&amp;quot; &amp;amp;&amp;amp; f.Owner == &amp;quot;&amp;quot; &amp;amp;&amp;amp; len(f.Tags) == 0 &amp;amp;&amp;amp; f.Visibility == &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+func (f *ImageFilterOptions) Build() (*images.ListOpts, error) {
&lt;&#x2F;span&gt;&lt;span&gt;+	opts := images.ListOpts{}
&lt;&#x2F;span&gt;&lt;span&gt;+	&#x2F;&#x2F; Set defaults for status, member_status, and sort
&lt;&#x2F;span&gt;&lt;span&gt;+	opts.Status = images.ImageStatusActive
&lt;&#x2F;span&gt;&lt;span&gt;+	opts.MemberStatus = images.ImageMemberStatusAccepted
&lt;&#x2F;span&gt;&lt;span&gt;+	opts.Sort = &amp;quot;created_at:desc&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	var err error
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if f.Name != &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		opts.Name = f.Name
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+	if f.Owner != &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		opts.Owner = f.Owner
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+	if len(f.Tags) &amp;gt; 0 {
&lt;&#x2F;span&gt;&lt;span&gt;+		opts.Tags = f.Tags
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+	if f.Visibility != &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		v, err := getImageVisibility(f.Visibility)
&lt;&#x2F;span&gt;&lt;span&gt;+		if err == nil {
&lt;&#x2F;span&gt;&lt;span&gt;+			opts.Visibility = *v
&lt;&#x2F;span&gt;&lt;span&gt;+		}
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	return &amp;amp;opts, err
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; func (c *RunConfig) Prepare(ctx *interpolate.Context) []error {
&lt;&#x2F;span&gt;&lt;span&gt;@@ -75,8 +123,8 @@ func (c *RunConfig) Prepare(ctx *interpolate.Context) []error {
&lt;&#x2F;span&gt;&lt;span&gt; 		}
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;-	if c.SourceImage == &amp;quot;&amp;quot; &amp;amp;&amp;amp; c.SourceImageName == &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;-		errs = append(errs, errors.New(&amp;quot;Either a source_image or a source_image_name must be specified&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;+	if c.SourceImage == &amp;quot;&amp;quot; &amp;amp;&amp;amp; c.SourceImageName == &amp;quot;&amp;quot; &amp;amp;&amp;amp; c.SourceImageFilters.Filters.Empty() {
&lt;&#x2F;span&gt;&lt;span&gt;+		errs = append(errs, errors.New(&amp;quot;Either a source_image, a source_image_name, or source_image_filter must be specified&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt; 	} else if len(c.SourceImage) &amp;gt; 0 &amp;amp;&amp;amp; len(c.SourceImageName) &amp;gt; 0 {
&lt;&#x2F;span&gt;&lt;span&gt; 		errs = append(errs, errors.New(&amp;quot;Only a source_image or a source_image_name can be specified, not both.&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;@@ -111,5 +159,34 @@ func (c *RunConfig) Prepare(ctx *interpolate.Context) []error {
&lt;&#x2F;span&gt;&lt;span&gt; 		}
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;+	&#x2F;&#x2F; if neither ID or image name is provided outside the filter, build the filter
&lt;&#x2F;span&gt;&lt;span&gt;+	if len(c.SourceImage) == 0 &amp;amp;&amp;amp; len(c.SourceImageName) == 0 {
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+		listOpts, filterErr := c.SourceImageFilters.Filters.Build()
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+		if filterErr != nil {
&lt;&#x2F;span&gt;&lt;span&gt;+			errs = append(errs, filterErr)
&lt;&#x2F;span&gt;&lt;span&gt;+		}
&lt;&#x2F;span&gt;&lt;span&gt;+		c.sourceImageOpts = *listOpts
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; 	return errs
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+&#x2F;&#x2F; Retrieve the specific ImageVisibility using the exported const from images
&lt;&#x2F;span&gt;&lt;span&gt;+func getImageVisibility(visibility string) (*images.ImageVisibility, error) {
&lt;&#x2F;span&gt;&lt;span&gt;+	visibilities := [...]images.ImageVisibility{
&lt;&#x2F;span&gt;&lt;span&gt;+		images.ImageVisibilityPublic,
&lt;&#x2F;span&gt;&lt;span&gt;+		images.ImageVisibilityPrivate,
&lt;&#x2F;span&gt;&lt;span&gt;+		images.ImageVisibilityCommunity,
&lt;&#x2F;span&gt;&lt;span&gt;+		images.ImageVisibilityShared,
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	for _, v := range visibilities {
&lt;&#x2F;span&gt;&lt;span&gt;+		if string(v) == visibility {
&lt;&#x2F;span&gt;&lt;span&gt;+			return &amp;amp;v, nil
&lt;&#x2F;span&gt;&lt;span&gt;+		}
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	return nil, fmt.Errorf(&amp;quot;Not a valid visibility: %s&amp;quot;, visibility)
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;builder&#x2F;openstack&#x2F;run_config_test.go b&#x2F;builder&#x2F;openstack&#x2F;run_config_test.go
&lt;&#x2F;span&gt;&lt;span&gt;index 6ce0cf602..f660a4e82 100644
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;builder&#x2F;openstack&#x2F;run_config_test.go
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;builder&#x2F;openstack&#x2F;run_config_test.go
&lt;&#x2F;span&gt;&lt;span&gt;@@ -4,7 +4,9 @@ import (
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;os&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;testing&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;github.com&#x2F;gophercloud&#x2F;gophercloud&#x2F;openstack&#x2F;imageservice&#x2F;v2&#x2F;images&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 	&amp;quot;github.com&#x2F;hashicorp&#x2F;packer&#x2F;helper&#x2F;communicator&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;github.com&#x2F;mitchellh&#x2F;mapstructure&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; )
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; func init() {
&lt;&#x2F;span&gt;&lt;span&gt;@@ -127,3 +129,84 @@ func TestRunConfigPrepare_FloatingIPPoolCompat(t *testing.T) {
&lt;&#x2F;span&gt;&lt;span&gt; 		t.Fatalf(&amp;quot;invalid value: %s&amp;quot;, c.FloatingIPNetwork)
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+&#x2F;&#x2F; This test case confirms that only allowed fields will be set to values
&lt;&#x2F;span&gt;&lt;span&gt;+&#x2F;&#x2F; The checked values are non-nil for their target type
&lt;&#x2F;span&gt;&lt;span&gt;+func TestBuildImageFilter(t *testing.T) {
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	filters := ImageFilterOptions{
&lt;&#x2F;span&gt;&lt;span&gt;+		Name:       &amp;quot;Ubuntu 16.04&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+		Visibility: &amp;quot;public&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+		Owner:      &amp;quot;1234567890&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+		Tags:       []string{&amp;quot;prod&amp;quot;, &amp;quot;ready&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	listOpts, err := filters.Build()
&lt;&#x2F;span&gt;&lt;span&gt;+	if err != nil {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Building filter failed with: %s&amp;quot;, err)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if listOpts.Name != &amp;quot;Ubuntu 16.04&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Name did not build correctly: %s&amp;quot;, listOpts.Name)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if listOpts.Visibility != images.ImageVisibilityPublic {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Visibility did not build correctly: %s&amp;quot;, listOpts.Visibility)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if listOpts.Owner != &amp;quot;1234567890&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Owner did not build correctly: %s&amp;quot;, listOpts.Owner)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+func TestBuildBadImageFilter(t *testing.T) {
&lt;&#x2F;span&gt;&lt;span&gt;+	filterMap := map[string]interface{}{
&lt;&#x2F;span&gt;&lt;span&gt;+		&amp;quot;limit&amp;quot;:    &amp;quot;3&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+		&amp;quot;size_min&amp;quot;: &amp;quot;25&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	filters := ImageFilterOptions{}
&lt;&#x2F;span&gt;&lt;span&gt;+	mapstructure.Decode(filterMap, &amp;amp;filters)
&lt;&#x2F;span&gt;&lt;span&gt;+	listOpts, err := filters.Build()
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if err != nil {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Error returned processing image filter: %s&amp;quot;, err.Error())
&lt;&#x2F;span&gt;&lt;span&gt;+		return &#x2F;&#x2F; we cannot trust listOpts to not cause unexpected behaviour
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if listOpts.Limit == filterMap[&amp;quot;limit&amp;quot;] {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Limit was parsed into ListOpts: %d&amp;quot;, listOpts.Limit)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if listOpts.SizeMin != 0 {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;SizeMin was parsed into ListOpts: %d&amp;quot;, listOpts.SizeMin)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if listOpts.Sort != &amp;quot;created_at:desc&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Sort was not applied: %s&amp;quot;, listOpts.Sort)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if !filters.Empty() {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;The filters should be empty due to lack of input&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+&#x2F;&#x2F; Tests that the Empty method on ImageFilterOptions works as expected
&lt;&#x2F;span&gt;&lt;span&gt;+func TestImageFiltersEmpty(t *testing.T) {
&lt;&#x2F;span&gt;&lt;span&gt;+	filledFilters := ImageFilterOptions{
&lt;&#x2F;span&gt;&lt;span&gt;+		Name:       &amp;quot;Ubuntu 16.04&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+		Visibility: &amp;quot;public&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+		Owner:      &amp;quot;1234567890&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+		Tags:       []string{&amp;quot;prod&amp;quot;, &amp;quot;ready&amp;quot;},
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if filledFilters.Empty() {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Expected filled filters to be non-empty: %v&amp;quot;, filledFilters)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	emptyFilters := ImageFilterOptions{}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if !emptyFilters.Empty() {
&lt;&#x2F;span&gt;&lt;span&gt;+		t.Errorf(&amp;quot;Expected default filter to be empty: %v&amp;quot;, emptyFilters)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;builder&#x2F;openstack&#x2F;step_run_source_server.go b&#x2F;builder&#x2F;openstack&#x2F;step_run_source_server.go
&lt;&#x2F;span&gt;&lt;span&gt;index e56218467..6bbb40eba 100644
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;builder&#x2F;openstack&#x2F;step_run_source_server.go
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;builder&#x2F;openstack&#x2F;step_run_source_server.go
&lt;&#x2F;span&gt;&lt;span&gt;@@ -76,6 +76,12 @@ func (s *StepRunSourceServer) Run(_ context.Context, state multistep.StateBag) m
&lt;&#x2F;span&gt;&lt;span&gt; 		ServiceClient:    computeClient,
&lt;&#x2F;span&gt;&lt;span&gt; 		Metadata:         s.InstanceMetadata,
&lt;&#x2F;span&gt;&lt;span&gt; 	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	&#x2F;&#x2F; check if image filter returned a source image ID and replace
&lt;&#x2F;span&gt;&lt;span&gt;+	if imageID, ok := state.GetOk(&amp;quot;source_image&amp;quot;); ok {
&lt;&#x2F;span&gt;&lt;span&gt;+		serverOpts.ImageRef = imageID.(string)
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; 	var serverOptsExt servers.CreateOptsBuilder
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 	&#x2F;&#x2F; Create root volume in the Block Storage service if required.
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;builder&#x2F;openstack&#x2F;step_source_image_info.go b&#x2F;builder&#x2F;openstack&#x2F;step_source_image_info.go
&lt;&#x2F;span&gt;&lt;span&gt;new file mode 100644
&lt;&#x2F;span&gt;&lt;span&gt;index 000000000..6cf3500ae
&lt;&#x2F;span&gt;&lt;span&gt;--- &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;builder&#x2F;openstack&#x2F;step_source_image_info.go
&lt;&#x2F;span&gt;&lt;span&gt;@@ -0,0 +1,76 @@
&lt;&#x2F;span&gt;&lt;span&gt;+package openstack
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+import (
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;context&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;github.com&#x2F;gophercloud&#x2F;gophercloud&#x2F;openstack&#x2F;imageservice&#x2F;v2&#x2F;images&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;github.com&#x2F;gophercloud&#x2F;gophercloud&#x2F;pagination&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;github.com&#x2F;hashicorp&#x2F;packer&#x2F;helper&#x2F;multistep&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+	&amp;quot;github.com&#x2F;hashicorp&#x2F;packer&#x2F;packer&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;+)
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+type StepSourceImageInfo struct {
&lt;&#x2F;span&gt;&lt;span&gt;+	SourceImage      string
&lt;&#x2F;span&gt;&lt;span&gt;+	SourceImageName  string
&lt;&#x2F;span&gt;&lt;span&gt;+	SourceImageOpts  images.ListOpts
&lt;&#x2F;span&gt;&lt;span&gt;+	SourceMostRecent bool
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+func (s *StepSourceImageInfo) Run(_ context.Context, state multistep.StateBag) multistep.StepAction {
&lt;&#x2F;span&gt;&lt;span&gt;+	config := state.Get(&amp;quot;config&amp;quot;).(Config)
&lt;&#x2F;span&gt;&lt;span&gt;+	ui := state.Get(&amp;quot;ui&amp;quot;).(packer.Ui)
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if s.SourceImage != &amp;quot;&amp;quot; || s.SourceImageName != &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		return multistep.ActionContinue
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	client, err := config.imageV2Client()
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	log.Printf(&amp;quot;Using Image Filters %v&amp;quot;, s.SourceImageOpts)
&lt;&#x2F;span&gt;&lt;span&gt;+	image := &amp;amp;images.Image{}
&lt;&#x2F;span&gt;&lt;span&gt;+	err = images.List(client, s.SourceImageOpts).EachPage(func(page pagination.Page) (bool, error) {
&lt;&#x2F;span&gt;&lt;span&gt;+		i, err := images.ExtractImages(page)
&lt;&#x2F;span&gt;&lt;span&gt;+		if err != nil {
&lt;&#x2F;span&gt;&lt;span&gt;+			return false, err
&lt;&#x2F;span&gt;&lt;span&gt;+		}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+		switch len(i) {
&lt;&#x2F;span&gt;&lt;span&gt;+		case 1:
&lt;&#x2F;span&gt;&lt;span&gt;+			*image = i[0]
&lt;&#x2F;span&gt;&lt;span&gt;+			return false, nil
&lt;&#x2F;span&gt;&lt;span&gt;+		default:
&lt;&#x2F;span&gt;&lt;span&gt;+			if s.SourceMostRecent {
&lt;&#x2F;span&gt;&lt;span&gt;+				*image = i[0]
&lt;&#x2F;span&gt;&lt;span&gt;+				return false, nil
&lt;&#x2F;span&gt;&lt;span&gt;+			}
&lt;&#x2F;span&gt;&lt;span&gt;+			return false, fmt.Errorf(
&lt;&#x2F;span&gt;&lt;span&gt;+				&amp;quot;Your query returned more than one result. Please try a more specific search, or set most_recent to true. Search filters: %v&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+				s.SourceImageOpts)
&lt;&#x2F;span&gt;&lt;span&gt;+		}
&lt;&#x2F;span&gt;&lt;span&gt;+	})
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if err != nil {
&lt;&#x2F;span&gt;&lt;span&gt;+		err := fmt.Errorf(&amp;quot;Error querying image: %s&amp;quot;, err)
&lt;&#x2F;span&gt;&lt;span&gt;+		state.Put(&amp;quot;error&amp;quot;, err)
&lt;&#x2F;span&gt;&lt;span&gt;+		ui.Error(err.Error())
&lt;&#x2F;span&gt;&lt;span&gt;+		return multistep.ActionHalt
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	if image.ID == &amp;quot;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;+		err := fmt.Errorf(&amp;quot;No image was found matching filters: %v&amp;quot;, s.SourceImageOpts)
&lt;&#x2F;span&gt;&lt;span&gt;+		state.Put(&amp;quot;error&amp;quot;, err)
&lt;&#x2F;span&gt;&lt;span&gt;+		ui.Error(err.Error())
&lt;&#x2F;span&gt;&lt;span&gt;+		return multistep.ActionHalt
&lt;&#x2F;span&gt;&lt;span&gt;+	}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	ui.Message(fmt.Sprintf(&amp;quot;Found Image ID: %s&amp;quot;, image.ID))
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+	state.Put(&amp;quot;source_image&amp;quot;, image.ID)
&lt;&#x2F;span&gt;&lt;span&gt;+	return multistep.ActionContinue
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+func (s *StepSourceImageInfo) Cleanup(state multistep.StateBag) {
&lt;&#x2F;span&gt;&lt;span&gt;+	&#x2F;&#x2F; No cleanup required for backout
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;website&#x2F;source&#x2F;docs&#x2F;builders&#x2F;openstack.html.md b&#x2F;website&#x2F;source&#x2F;docs&#x2F;builders&#x2F;openstack.html.md
&lt;&#x2F;span&gt;&lt;span&gt;index a05ce3d67..28566bd0d 100644
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;website&#x2F;source&#x2F;docs&#x2F;builders&#x2F;openstack.html.md
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;website&#x2F;source&#x2F;docs&#x2F;builders&#x2F;openstack.html.md
&lt;&#x2F;span&gt;&lt;span&gt;@@ -70,6 +70,11 @@ builder.
&lt;&#x2F;span&gt;&lt;span&gt;     is an alternative way of providing `source_image` and only either of them
&lt;&#x2F;span&gt;&lt;span&gt;     can be specified.
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;+-   `source_image_filter` (map) - The search filters for determining the base
&lt;&#x2F;span&gt;&lt;span&gt;+    image to use. This is an alternative way of providing `source_image` and
&lt;&#x2F;span&gt;&lt;span&gt;+    only one of these methods can be used. `source_image` will override the
&lt;&#x2F;span&gt;&lt;span&gt;+    filters.
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; -   `username` or `user_id` (string) - The username or id used to connect to
&lt;&#x2F;span&gt;&lt;span&gt;     the OpenStack service. If not specified, Packer will use the environment
&lt;&#x2F;span&gt;&lt;span&gt;     variable `OS_USERNAME` or `OS_USERID`, if set. This is not required if
&lt;&#x2F;span&gt;&lt;span&gt;@@ -153,7 +158,7 @@ builder.
&lt;&#x2F;span&gt;&lt;span&gt;     Defaults to false.
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; -   `region` (string) - The name of the region, such as &amp;quot;DFW&amp;quot;, in which to
&lt;&#x2F;span&gt;&lt;span&gt;-    launch the server to create the AMI. If not specified, Packer will use the
&lt;&#x2F;span&gt;&lt;span&gt;+    launch the server to create the image. If not specified, Packer will use the
&lt;&#x2F;span&gt;&lt;span&gt;     environment variable `OS_REGION_NAME`, if set.
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; -   `reuse_ips` (boolean) - Whether or not to attempt to reuse existing
&lt;&#x2F;span&gt;&lt;span&gt;@@ -166,6 +171,48 @@ builder.
&lt;&#x2F;span&gt;&lt;span&gt; -   `security_groups` (array of strings) - A list of security groups by name to
&lt;&#x2F;span&gt;&lt;span&gt;     add to this instance.
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;+-   `source_image_filter` (object) - Filters used to populate filter options.
&lt;&#x2F;span&gt;&lt;span&gt;+    Example:
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+    ``` json
&lt;&#x2F;span&gt;&lt;span&gt;+    {
&lt;&#x2F;span&gt;&lt;span&gt;+        &amp;quot;source_image_filter&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;+            &amp;quot;filters&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;+                &amp;quot;name&amp;quot;: &amp;quot;ubuntu-16.04&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+                &amp;quot;visibility&amp;quot;: &amp;quot;protected&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+                &amp;quot;owner&amp;quot;: &amp;quot;d1a588cf4b0743344508dc145649372d1&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;+                &amp;quot;tags&amp;quot;: [&amp;quot;prod&amp;quot;, &amp;quot;ready&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;+            },
&lt;&#x2F;span&gt;&lt;span&gt;+            &amp;quot;most_recent&amp;quot;: true
&lt;&#x2F;span&gt;&lt;span&gt;+        }
&lt;&#x2F;span&gt;&lt;span&gt;+    }
&lt;&#x2F;span&gt;&lt;span&gt;+    ```
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+    This selects the most recent production Ubuntu 16.04 shared to you by the given owner.
&lt;&#x2F;span&gt;&lt;span&gt;+    NOTE: This will fail unless *exactly* one image is returned, or `most_recent` is set to true.
&lt;&#x2F;span&gt;&lt;span&gt;+    In the example of multiple returned images, `most_recent` will cause this to succeed by selecting
&lt;&#x2F;span&gt;&lt;span&gt;+    the newest image of the returned images.
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+    -   `filters` (map of strings) - filters used to select a `source_image`.
&lt;&#x2F;span&gt;&lt;span&gt;+        NOTE: This will fail unless *exactly* one image is returned, or `most_recent` is set to true.
&lt;&#x2F;span&gt;&lt;span&gt;+        Of the filters described in [ImageService](https:&#x2F;&#x2F;developer.openstack.org&#x2F;api-ref&#x2F;image&#x2F;v2&#x2F;), the following
&lt;&#x2F;span&gt;&lt;span&gt;+        are valid:
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+        - name (string)
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+        - owner (string)
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+        - tags (array of strings)
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+        - visibility (string)
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+    -   `most_recent` (boolean) - Selects the newest created image when true.
&lt;&#x2F;span&gt;&lt;span&gt;+        This is most useful for selecting a daily distro build.
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+    You may set use this in place of `source_image` If `source_image_filter` is provided
&lt;&#x2F;span&gt;&lt;span&gt;+    alongside `source_image`, the `source_image` will override the filter. The filter
&lt;&#x2F;span&gt;&lt;span&gt;+    will not be used in this case.
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; -   `ssh_interface` (string) - The type of interface to connect via SSH. Values
&lt;&#x2F;span&gt;&lt;span&gt;     useful for Rackspace are &amp;quot;public&amp;quot; or &amp;quot;private&amp;quot;, and the default behavior is
&lt;&#x2F;span&gt;&lt;span&gt;     to connect via whichever is returned first from the OpenStack API.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;!-- References --&gt;
</content>
        
    </entry>
</feed>
